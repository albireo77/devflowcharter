<?xml version="1.0" encoding="UTF-8"?>

<!-- 
C language definition file for devFlowcharter.
It may not contain all supported tags. For all supported tags and their descriptions go to file Example.xml
-->

<Language>

    <Name>ANSI C</Name>
    <CommentBegin>/*</CommentBegin>
    <CommentEnd>*/</CommentEnd>
    <InputFunction>scanf()</InputFunction>
    <OutputFunction>printf()</OutputFunction>
    <InOutCursorPos>-1</InOutCursorPos>
    <DefaultExt>c</DefaultExt>
    <LibraryExt>.h</LibraryExt>
    <AssignOperator>=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>
    <FuncBracketsCursorPos>1</FuncBracketsCursorPos>
    <InstrEnd>;</InstrEnd>

    <EnabledConsts>true</EnabledConsts>
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledUserDataTypes>true</EnabledUserDataTypes>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <CaseSensitiveSyntax>true</CaseSensitiveSyntax>
    <UpperCaseConstId>false</UpperCaseConstId>
    <CodeIncludeExternVarConst>true</CodeIncludeExternVarConst>
    <AllowUnboundedArrays>true</AllowUnboundedArrays>

    <FoldRegions>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtChar" WholeWords="false">
            <Open Keyword="{"/>
            <Close Keyword="}"/>
        </FoldRegion>
        <FoldRegion AddClose="true" NoSubFolds="true" Type="rtKeyword" WholeWords="true">
            <Open Keyword="/*"/>
            <Close Keyword="*/"/>
        </FoldRegion>
    </FoldRegions>
    <NativeDataTypes>
        <DataType kind="int">int</DataType>
        <DataType kind="real">float</DataType>
        <DataType kind="int">char</DataType>
        <DataType>void</DataType>
        <DataType kind="ptr" origtype="int">int*</DataType>
        <DataType kind="ptr" origtype="float">float*</DataType>
        <DataType kind="ptr" origtype="char">char*</DataType>
        <DataType>FILE</DataType>
        <DataType kind="ptr" origtype="FILE">FILE*</DataType>
    </NativeDataTypes>
    <KeyWords>
        <KeyWord>auto</KeyWord>
        <KeyWord>break</KeyWord>
        <KeyWord>char</KeyWord>
        <KeyWord>continue</KeyWord>
        <KeyWord>default</KeyWord>
        <KeyWord>double</KeyWord>
        <KeyWord>enum</KeyWord>
        <KeyWord>extern</KeyWord>
        <KeyWord>float</KeyWord>
        <KeyWord>int</KeyWord>
        <KeyWord>long</KeyWord>
        <KeyWord>register</KeyWord>
        <KeyWord>return</KeyWord>
        <KeyWord>short</KeyWord>
        <KeyWord>signed</KeyWord>
        <KeyWord>sizeof</KeyWord>
        <KeyWord>static</KeyWord>
        <KeyWord>struct</KeyWord>
        <KeyWord>switch</KeyWord>
        <KeyWord>typedef</KeyWord>
        <KeyWord>union</KeyWord>
        <KeyWord>unsigned</KeyWord>
        <KeyWord>void</KeyWord>
        <KeyWord>volatile</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>do</KeyWord>
        <KeyWord>while</KeyWord>
        <KeyWord>else</KeyWord>
        <KeyWord>case</KeyWord>
        <KeyWord>for</KeyWord>
        <KeyWord>goto</KeyWord>
        <KeyWord>const</KeyWord>
    </KeyWords>

<!--
Element ProcedureLabelKey
Description: Key for label displayed for flowchart of function that returns nothing (type = none).
It should contain name of key (free to be added) present in translation file (.lng) in Others section
-->
<ProcedureLabelKey>ProcedureLabelC</ProcedureLabelKey>

<!--
Element ConstructorLabelKey
Description: Key for label displayed for constructor flowchart
-->
<ConstructorLabelKey>ConstructorLabelC</ConstructorLabelKey>

<!--
Element FunctionLabelKey
Description: Key for label displayed for flowchart of function that returns some data
-->
<FunctionLabelKey>FunctionLabelC</FunctionLabelKey>

<!--
Element ProgramLabelKey
Description: Key for label displayed for flowchart of project's main program
-->
<ProgramLabelKey>ProgramLabelC</ProgramLabelKey>

<HighLighterVarName>SynCppSyn1</HighLighterVarName>

<!--
Element ConstIDSpecChars
Character string containing special characters that are valid in constant identifier.
It is used for example in C to allow declaring constants acting as function macros.
-->
<ConstIDSpecChars>(),</ConstIDSpecChars>

<!--
Element ProgramHeaderTemplate
Available placeholders:
   %s1 - project name
   %s2 - language name
   %s3 - text from comment marked as Program Header
   %s4 - code generation timestamp
   %s5 - language definition file used for code generation
-->
<ProgramHeaderTemplate>/*
	%s2 program generated by devFlowcharter (https://github.com/albireo77/devflowcharter)
	for %s1 project
	%s3
*/
</ProgramHeaderTemplate>

<WhileTemplate>while (%s1)
{
	%b1
}
</WhileTemplate>

<RepeatUntilTemplate>do
{
	%b1
}
while (%s1);
</RepeatUntilTemplate>

<RepeatUntilAsDoWhile>true</RepeatUntilAsDoWhile>

<IfTemplate>if (%s1)
{
	%b1
}
</IfTemplate>

<IfElseTemplate>if (%s1)
{
	%b1
}
else
{
	%b2
}
</IfElseTemplate>

<LabelWhile>while</LabelWhile>
<LabelRepeat>do while</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>switch</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>func call</LabelFuncCall>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<ElseLabel>else</ElseLabel>

<!--
Element FileContentsTemplate
Description: Template to define source file layout
Available placeholders:
   %s1 - project name
   %s2 - program header section (element ProgramHeaderTemplate)
   %s3 - libraries section (element LibTemplate)
   %s4 - global constants section (element ConstTemplate)
   %s5 - global variables section (element VarTemplate)
   %s6 - user datatypes section (element DataTypesTemplate)
   %s7 - user functions section (element FunctionsTemplate)
   %s8 - main function (element MainFunctionTemplate)
-->
<FileContentsTemplate>%s2

%s3

%s4

%s6

%s5

%s7

%s8
</FileContentsTemplate>

<RepeatUntilDescTemplate>do while (%s1)</RepeatUntilDescTemplate>

<ForDoVarList>true</ForDoVarList>

<ForDoVarString>=</ForDoVarString>

<!--
Element ForDoTemplate
Available placeholders:
   %s1 - control variable
   %s2 - start value
   %s3 - stop value
   %s4 - first "increasing or decreasing" modifier string (element ForDoTemplateModifier1)
   %s5 - second "increasing or decreasing" modifier string (element ForDoTemplateModifier2)  
-->
<ForDoTemplate>for (%s1 = %s2; %s1 %s4 %s3; %s1%s5)
{
	%b1
}
</ForDoTemplate>

<!--
Element ForDoTemplateModifier1
Description: It returns value based on whether for..do block is increasing or decreasing
It returns value "<=" if block is increasing or ">=" if decreasing 
-->
<ForDoTemplateModifier1>&lt;=|&gt;=</ForDoTemplateModifier1>

<!--
Element ForDoTemplateModifier2
Description: It returns value based on whether for..do block is increasing or decreasing
It returns value "++" if block is increasing or "--" if decreasing
-->
<ForDoTemplateModifier2>++|--</ForDoTemplateModifier2>

<CaseOfValueTemplate>case %s1:
	%b1
	break;
</CaseOfValueTemplate>

<CaseOfDefaultValueTemplate>default:
	%b1
</CaseOfDefaultValueTemplate>

<CaseOfTemplate>switch (%s1)
{
	%s2
	%s3
}
</CaseOfTemplate>

<TextTemplate>/* %s1 */</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<FunctionCallTemplate>%s1;</FunctionCallTemplate>

<ReturnTemplate>return %s1;</ReturnTemplate>

<InstrTemplate>%s1;</InstrTemplate>

<InputTemplate>%s1;</InputTemplate>

<OutputTemplate>%s1;</OutputTemplate>

<!--
Element MainFunctionTemplate
Description: Template for main program body
Available placeholders:
   %s1 - project name
   %s2 - global variables (element VarsTemplate)
   %s3 - return statement which is generated if last statement of program isn't return block (element ProgramReturnTemplate)
   %b1 - main function body  
-->
<MainFunctionTemplate>int main(int argc, char* argv[])
{
	%b1
	%s3
}
</MainFunctionTemplate>

<ProgramReturnTemplate>return 0;</ProgramReturnTemplate>

<!--
Element FunctionBodyTemplate
Description: Template for function body
Available placeholders:
   %s1 - function name
   %s2 - function local variables (element VarsTemplate)
   %b1 - body of function  
-->
<FunctionBodyTemplate>{
	%s2

	%b1
}
</FunctionBodyTemplate>

<!--
Element FunctionHeaderTemplate
Description: Template for function header
Available placeholders:
   %s1 - name of the function
   %s2 - description/prefix of the function (element FunctionHeaderDescTemplate)
   %s3 - list of function parameters (list of FunctionHeaderArgsEntryMask elements)
   %s4 - return type
   %s5 - first string that depends if return type is none or specific (element FunctionHeaderTypeModifier1) 
   %s6 - second string that depends if return type is none or specific (element FunctionHeaderTypeModifier2)
   %s7 - string that depends if function is external or not (element FunctionHeaderExternalModifier); see also description for element ExternalLabel 
   %s8 - string that depends if function return type is array or not (element FunctionHeaderTypeArrayModifier)
   %s9 - string that depends if function is of static context (element FunctionHeaderStaticModifier); see also description for element StaticLabel     
-->
<FunctionHeaderTemplate>%s2
%s4%s5%s8 %s1(%s3)
</FunctionHeaderTemplate>

<!--
Element FunctionHeaderTypeModifier1
Description: It returns value based on whether or not function returns specific type
It returns value "void" if function type is none or an empty string otherwise
-->
<FunctionHeaderTypeModifier1>void|</FunctionHeaderTypeModifier1>

<!--
Element FunctionHeaderArgsEntryMask
Available placeholders:
   %s1 - argument name
   %s2 - argument type
   %s3 - used if argument is passed by reference (element FunctionHeaderArgsEntryRef)
   %s4 - used if argument is an array (element FunctionHeaderArgsEntryArray)
   %s5 - used if argument is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if argument is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - expression for argument default value (element FunctionHeaderArgsEntryDefault)
-->
<FunctionHeaderArgsEntryMask>%s5%s6%s2%s3 %s1%s4, </FunctionHeaderArgsEntryMask>

<FunctionHeaderArgsEntryRef>*</FunctionHeaderArgsEntryRef>
<FunctionHeaderArgsEntryArray>[]</FunctionHeaderArgsEntryArray>
<FunctionHeaderArgsEntryRecord>struct </FunctionHeaderArgsEntryRecord>
<FunctionHeaderArgsEntryEnum>enum </FunctionHeaderArgsEntryEnum>
<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<!--
Element FunctionHeaderTypeArrayModifier
Description: It returns value based on whether or not function return type is an array
In given example, it returns value "[]" if function return type is array or an empty string otherwise
-->
<FunctionHeaderTypeArrayModifier>[]|</FunctionHeaderTypeArrayModifier>

<!--
Element FunctionTemplate
Description: Template for function (header + body)
Available placeholders:
   %s1 - function's header line (element FunctionHeaderTemplate)
   %s2 - function's local variables (element VarsTemplate)
   %s3 - function's body (element FunctionBodyTemplate)  
-->
<FunctionTemplate>%s1
%s3

</FunctionTemplate>

<!--
Element FunctionsTemplate
Description: Template for user functions section
Available placeholders:
   %s1 - list of function declarations (list of FunctionTemplate elements)  
-->
<FunctionsTemplate>%s1</FunctionsTemplate>

<!--
Element VarExternModifier
Description: Returns value based on whether or not function is declared as external, non-external or trans-external
Trans-external state is enabled only if AllowTransExternVarConst is set to true.
In given example, it returns "extern " if variable is external or empty strings in 2 other cases.
-->
<VarExternModifier>extern </VarExternModifier>

<!--
Element VarEntry
Description: Entry for single variable (non-array) declaration
Available placeholders:
   %s1 - variable name
   %s2 - variable type
   %s4 - variable initial value 
   %s5 - used if variable is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if variable is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - string depending if variable is external (element VarExternModifier)
-->
<VarEntry>%s7%s5%s6%s2 %s1%s4;</VarEntry>

<!--
Element VarEntryArray
Description: Entry for single array variable declaration
Available placeholders are the same as for VarEntry element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<VarEntryArray>%s7%s5%s6%s2 %s1%s3%s4;</VarEntryArray>

<!--
Element VarEntryArraySize
Description: Entry for array's single dimension
Available placeholders are the same as for VarEntry element and:
   %s - size of array dimension
-->
<VarEntryArraySize>[%s]</VarEntryArraySize>

<!--
Element VarEntryInit
Description: Mask for variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInit> = %s1</VarEntryInit>

<!--
Element VarTemplate
Description: Template for section to declare variables
Available placeholders:
   %s1 - list of variables (VarEntry or VarEntryArray elements) 
-->
<VarTemplate>%s1
</VarTemplate>

<!--
Element ConstTemplate
Description: Template for section to declare constants
Available placeholders:
   %s1 - list of constants (ConstEntry elements) 
-->
<ConstTemplate>%s1
</ConstTemplate>

<!--
Element ConstEntry
Description: Entry for single declaration of constant
Available placeholders:
   %s1 - constant name
   %s2 - constant value
   %s3 - string depending if constant is external (element ConstExternModifier)
   %s4 - constant type expression (element ConstTypeModifier)
-->
<ConstEntry>#define %s1 %s2</ConstEntry>

<!--
Element PointerTypeMask
Description: Mask to create pointer type based on given type
-->
<PointerTypeMask>%s*</PointerTypeMask>

<!--
Element DataTypesTemplate
Description: Template for data types section
Available placeholders:
   %s1 - list of data type declarations  
-->
<DataTypesTemplate>%s1
</DataTypesTemplate>

<!--
Element DataTypeOtherMask
Description: Template for other types.
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name
   %s2 - base type
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)
-->
<DataTypeOtherMask>typedef %s2 %s1;</DataTypeOtherMask>

<!--
Element DataTypeArrayMask
Description: Template for array type.
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - array type name
   %s2 - base array type
   %s3 - array type size
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)   
-->
<DataTypeArrayMask>typedef %s2 %s1%s3;</DataTypeArrayMask>

<!--
Element DataTypeRecordTemplate
Description: Template for record type; see also description for RecordLabel element
Available placeholders:
   %s1 - record name 
   %s2 - list of fields (DataTypeRecordFieldMask or DataTypeRecordFieldArrayMask elements)
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)
-->
<DataTypeRecordTemplate>struct %s1
{
	%s2
};

</DataTypeRecordTemplate>

<!--
Element DataTypeRecordFieldMask
Description: Entry for single field (non-array) of record
Available placeholders:
   %s1 - field name
   %s2 - field type
   %s4 - used if field is a record (element FunctionHeaderArgsEntryRecord)
   %s5 - used if field is an enumeration (element FunctionHeaderArgsEntryEnum)
-->
<DataTypeRecordFieldMask>%s4%s5%s2 %s1;</DataTypeRecordFieldMask>

<!--
Element DataTypeRecordFieldArrayMask
Description: Entry for single field (array) of record
Available placeholders are the same as for DataTypeRecordFieldMask element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<DataTypeRecordFieldArrayMask>%s4%s5%s2 %s1%s3;</DataTypeRecordFieldArrayMask>

<!--
Element DataTypeEnumTemplate
Description: Template for enumeration type
Available placeholders:
   %s1 - enumeration name 
   %s2 - list of values (list of DataTypeEnumEntryList elements)
-->
<DataTypeEnumTemplate>enum %s1 {%s2};</DataTypeEnumTemplate>

<!--
Element DataTypeEnumEntryList
Description: Mask for list of enumerated values
Available placeholders:
   %s - enumerated value
-->
<DataTypeEnumEntryList>%s, </DataTypeEnumEntryList>

<!--
Element DataTypeEnumEntryListStripCount
Description: It contains number of chars to strip from end of enumeration values list (element DataTypeEnumEntryList).
In given example ending to be stripped is ", " 
-->
<DataTypeEnumEntryListStripCount>2</DataTypeEnumEntryListStripCount>

<!--
Element UserTypeDesc
Description: Mask for user datatype description
Available placeholders:
   %s1 - type name
   %s2 - type kind
-->
<UserTypeDesc>%s2 %s1</UserTypeDesc>

<!--
Element RecordLabel
Used to change default label displayed for record data type; it's not translated
-->
<RecordLabel>struct</RecordLabel>


</Language>
