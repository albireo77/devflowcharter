<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Python language definition file for devFlowcharter.
It may not contain all supported tags. For all supported tags and their descriptions go to file Example.xml
-->

<Language>
    <Name>Python 3</Name>
    <CommentBegin>#</CommentBegin>
    <InputFunction>input()</InputFunction>
    <OutputFunction>print()</OutputFunction>
    <InOutCursorPos>-1</InOutCursorPos>
    <DefaultExt>py</DefaultExt>
    <LibraryExt>.py</LibraryExt>
    <AssignOperator>=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>
    <FuncBracketsCursorPos>1</FuncBracketsCursorPos>
    <DecimalSeparator>.</DecimalSeparator>
			
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledPointers>false</EnabledPointers>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <EnabledUserDataTypes>false</EnabledUserDataTypes>
    <CaseSensitiveSyntax>true</CaseSensitiveSyntax>
    <AllowEnumsInForLoop>true</AllowEnumsInForLoop>
    <AllowUserFunctionOverload>true</AllowUserFunctionOverload>
    <AllowUnboundedArrays>true</AllowUnboundedArrays>

    <NativeDataTypes>
        <DataType>General</DataType>
    </NativeDataTypes>

    <KeyWords>
	<KeyWord>and</KeyWord>
	<KeyWord>assert</KeyWord>
	<KeyWord>break</KeyWord>
	<KeyWord>class</KeyWord>
	<KeyWord>continue</KeyWord>
	<KeyWord>def</KeyWord>
	<KeyWord>del</KeyWord>
	<KeyWord>elif</KeyWord>
	<KeyWord>else</KeyWord>
	<KeyWord>except</KeyWord>
	<KeyWord>exec</KeyWord>
	<KeyWord>finally</KeyWord>
	<KeyWord>for</KeyWord>
	<KeyWord>from</KeyWord>
	<KeyWord>global</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>import</KeyWord>
        <KeyWord>in</KeyWord>
        <KeyWord>is</KeyWord>
        <KeyWord>lambda</KeyWord>
        <KeyWord>not</KeyWord>
	<KeyWord>or</KeyWord>
	<KeyWord>pass</KeyWord>
	<KeyWord>print</KeyWord>
	<KeyWord>raise</KeyWord>
	<KeyWord>return</KeyWord>
	<KeyWord>try</KeyWord>
	<KeyWord>while</KeyWord>
	<KeyWord>with</KeyWord>
	<KeyWord>yield</KeyWord>
    </KeyWords>

<!--
Element ProcedureLabelKey
Description: Key for abel displayed for flowchart of function that returns nothing (type = none).
It should contain name of key present (free to be added) in translation .lng file (section Others)
-->	
<ProcedureLabelKey>ProcedureLabelPython</ProcedureLabelKey>

<!--
Element ConstructorLabelKey
Description: Key for label displayed for constructor flowchart
-->
<ConstructorLabelKey>ConstructorLabelPython</ConstructorLabelKey>

<!--
Element FunctionLabelKey
Description: Key for label displayed for flowchart of function that returns some data
-->
<FunctionLabelKey>FunctionLabelPython</FunctionLabelKey>

<!--
Element ProgramLabelKey
Description: Key for label displayed for flowchart of project's main program
-->
<ProgramLabelKey>ProgramLabelPython</ProgramLabelKey>

<LabelWhile>while</LabelWhile>
<LabelRepeat>repeat until</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>case</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>func call</LabelFuncCall>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<ElseLabel>else</ElseLabel>

<HighLighterVarName>SynPythonSyn1</HighLighterVarName>

<!--
Element FileContentsTemplate
Description: Template to define source file layout
Available placeholders:
   %s1 - project name
   %s2 - program header section (element ProgramHeaderTemplate)
   %s3 - libraries section (element LibTemplate)
   %s4 - global constants section (element ConstTemplate)
   %s5 - global variables section (element VarTemplate)
   %s6 - user datatypes section (element DataTypesTemplate)
   %s7 - user functions section (element FunctionsTemplate)
   %s8 - main function (element MainFunctionTemplate)
-->
<FileContentsTemplate>%s2

%s3

%s4

%s5

%s7

%s8
</FileContentsTemplate>

<WhileTemplate>while %s1:
	%b1
</WhileTemplate>

<IfTemplate>if %s1:
	%b1
</IfTemplate>

<IfElseTemplate>if %s1:
	%b1
else:
	%b2
</IfElseTemplate>

<RepeatUntilTemplate>while True:
	%b1
	if %s1: break
</RepeatUntilTemplate>

<CaseOfFirstValueTemplate>if %s2 == %s1:
	%b1
</CaseOfFirstValueTemplate>

<CaseOfValueTemplate>elif %s2 == %s1:
	%b1
</CaseOfValueTemplate>

<CaseOfDefaultValueTemplate>else:
	%b1
</CaseOfDefaultValueTemplate>

<CaseOfTemplate>%s2
%s3
</CaseOfTemplate>

<!--
Element ForDoVarList
Determines whether control variable in for..do block should be selected from dropdown list (true) or user is free to enter anything (false)
-->
<ForDoVarList>false</ForDoVarList>

<ForDoVarString>in</ForDoVarString>

<!-- ForDoTemplate is not existing here since code generation of this block is hardcoded for Python -->

<ReturnTemplate>return %s1</ReturnTemplate>

<FunctionCallTemplate>%s1</FunctionCallTemplate>

<InstrTemplate>%s1</InstrTemplate>

<InputTemplate>%s1</InputTemplate>

<OutputTemplate>%s1</OutputTemplate>

<TextTemplate>...
%s1
...</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<!--
Element ProgramHeaderTemplate
Available placeholders:
   %s1 - project name
   %s2 - language name
   %s3 - text from comment marked as Program Header
   %s4 - code generation timestamp
   %s5 - language definition file used for code generation
-->
<ProgramHeaderTemplate># %s2 program generated by devFlowcharter (https://github.com/albireo77/devflowcharter)
# for %s1 project
#
#	%s3

</ProgramHeaderTemplate>

<!--
Element FunctionHeaderArgsEntryMask
Available placeholders:
   %s1 - argument name
   %s2 - argument type
   %s3 - used if argument is passed by reference (element FunctionHeaderArgsEntryRef)
   %s4 - used if argument is an array (element FunctionHeaderArgsEntryArray)
   %s5 - used if argument is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if argument is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - expression for argument default value (element FunctionHeaderArgsEntryDefault)
-->
<FunctionHeaderArgsEntryMask>%s1%s7, </FunctionHeaderArgsEntryMask>

<!--
Element FunctionHeaderArgsEntryDefault
Description: Template for function parameter default value
Available placeholders:
   %s - default value
-->
<FunctionHeaderArgsEntryDefault> = %s</FunctionHeaderArgsEntryDefault>

<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<!--
Element FunctionHeaderTemplate
Description: Template for function header
Available placeholders:
   %s1 - name of the function
   %s2 - description/prefix of the function (element FunctionHeaderDescTemplate)
   %s3 - list of function parameters (list of FunctionHeaderArgsEntryMask elements)
   %s4 - return type
   %s5 - first string that depends if return type is none or specific (element FunctionHeaderTypeModifier1) 
   %s6 - second string that depends if return type is none or specific (element FunctionHeaderTypeModifier2)
   %s7 - string that depends if function is external or not (element FunctionHeaderExternalModifier); see also description for element ExternalLabel 
   %s8 - string that depends if function return type is array or not (element FunctionHeaderTypeArrayModifier)
   %s9 - string that depends if function is of static context (element FunctionHeaderStaticModifier); see also description for element StaticLabel     
-->
<FunctionHeaderTemplate>%s2
def %s1(%s3):
</FunctionHeaderTemplate>

<!--
Element FunctionBodyTemplate
Description: Template for function body
Available placeholders:
   %s1 - function name
   %s2 - function local variables (element VarTemplate)
   %b1 - body of function  
-->
<FunctionBodyTemplate>	%s2
	%b1
</FunctionBodyTemplate>

<!--
Element FunctionTemplate
Description: Template for function (header + body)
Available placeholders:
   %s1 - function's header line (element FunctionHeaderTemplate or ConstructorHeaderTemplate)
   %s2 - function's local variables (element VarTemplate)
   %s3 - function's body (element FunctionBodyTemplate)  
-->
<FunctionTemplate>%s1
	%s3

</FunctionTemplate>

<!--
Element FunctionsTemplate
Description: Template for user functions section
Available placeholders:
   %s1 - list of function declarations (list of FunctionTemplate elements)  
-->
<FunctionsTemplate>%s1</FunctionsTemplate>

<!--
Element MainFunctionTemplate
Description: Template for main program body
Available placeholders:
   %s1 - project name
   %s2 - global variables (element VarTemplate)
   %s3 - return statement which is generated if last statement of program isn't return block (element ProgramReturnTemplate)
   %b1 - main function body
-->
<MainFunctionTemplate>
%b1

</MainFunctionTemplate>

<!--
Element VarEntry
Description: Entry for single variable (non-array) declaration
Available placeholders:
   %s1 - variable name
   %s2 - variable type
   %s4 - variable initial value (element VarEntryInit or VarEntryInitExtern) 
   %s5 - used if variable is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if variable is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - string depending if variable is external (element VarExternModifier)
-->
<VarEntry>%s1%s4</VarEntry>

<!--
Element VarEntryArray
Description: Entry for single array variable declaration
Available placeholders are the same as for VarEntry element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<VarEntryArray>%s1%s4</VarEntryArray>

<!--
Element VarEntryInit
Description: Mask for not external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInit> = %s1</VarEntryInit>

<!--
Element VarEntryInitExtern
Description: Mask for external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInitExtern> = %s1</VarEntryInitExtern>

<!--
Element VarTemplate
Description: Template for section to declare variables
Available placeholders:
   %s1 - list of variables (VarEntry or VarEntryArray elements) 
-->
<VarTemplate>%s1
</VarTemplate>

<!--
Element LibTemplate
Description: Template for section containing libraries
Available placeholders:
   %s1 - list of libraries as separated entries (list of LibEntry elements) 
   %s2 - list of libraries as single list (element LibEntryList)
Notice: %s1 and %s2 placeholders should be used interchangeably
-->
<LibTemplate>import %s2

</LibTemplate>
<LibEntryList>%s, </LibEntryList>
<LibEntryListStripCount>2</LibEntryListStripCount>

</Language>