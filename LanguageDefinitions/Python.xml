<?xml version="1.0" encoding="UTF-8"?>

<Language>
    <Name>Python 3</Name>
    <CommentBegin>#</CommentBegin>
    <InputFunction>input()</InputFunction>
    <OutputFunction>print()</OutputFunction>
    <DefaultExt>py</DefaultExt>
    <LibraryExt>.py</LibraryExt>
    <AssignOperator>=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>
    <DecimalSeparator>.</DecimalSeparator>
    <InOutCursorPos>-1</InOutCursorPos>
    <FuncBracketsCursorPos>-1</FuncBracketsCursorPos>
			
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledUserDataTypes>true</EnabledUserDataTypes>
    <EnabledPointers>false</EnabledPointers>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <CaseSensitiveSyntax>true</CaseSensitiveSyntax>
    <AllowEnumsInForLoop>true</AllowEnumsInForLoop>
    <AllowUserFunctionOverload>true</AllowUserFunctionOverload>
    <AllowUnboundedArrays>true</AllowUnboundedArrays>

    <NativeDataTypes>
        <DataType>General</DataType>
    </NativeDataTypes>

    <KeyWords>
        <KeyWord>and</KeyWord>
        <KeyWord>assert</KeyWord>
        <KeyWord>break</KeyWord>
        <KeyWord>class</KeyWord>
        <KeyWord>continue</KeyWord>
        <KeyWord>def</KeyWord>
	<KeyWord>del</KeyWord>
	<KeyWord>elif</KeyWord>
	<KeyWord>else</KeyWord>
	<KeyWord>except</KeyWord>
	<KeyWord>exec</KeyWord>
	<KeyWord>finally</KeyWord>
	<KeyWord>for</KeyWord>
	<KeyWord>from</KeyWord>
	<KeyWord>global</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>import</KeyWord>
        <KeyWord>in</KeyWord>
        <KeyWord>is</KeyWord>
        <KeyWord>lambda</KeyWord>
        <KeyWord>not</KeyWord>
	<KeyWord>or</KeyWord>
	<KeyWord>pass</KeyWord>
	<KeyWord>print</KeyWord>
	<KeyWord>raise</KeyWord>
	<KeyWord>return</KeyWord>
	<KeyWord>try</KeyWord>
	<KeyWord>while</KeyWord>
	<KeyWord>with</KeyWord>
	<KeyWord>yield</KeyWord>
    </KeyWords>
	
<ProcedureLabelKey>ProcedureLabelPython</ProcedureLabelKey>
<FunctionLabelKey>FunctionLabelPython</FunctionLabelKey>
<ProgramLabelKey>ProgramLabelPython</ProgramLabelKey>

<LabelWhile>while</LabelWhile>
<LabelRepeat>repeat until</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>case</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>func call</LabelFuncCall>
<LabelReturn>return</LabelReturn>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<RepeatDesc>repeat until %s1</RepeatDesc>

<ElseLabel>else</ElseLabel>

<HighLighterVarName>SynPythonSyn1</HighLighterVarName>

<WhileTemplate>while %s1:
	%b1
</WhileTemplate>

<IfTemplate>if %s1:
	%b1
</IfTemplate>

<IfElseTemplate>if %s1:
	%b1
else:
	%b2
</IfElseTemplate>

<RepeatUntilTemplate>while True:
	%b1
	if %s1:
		break
</RepeatUntilTemplate>

<ForDoVarList>false</ForDoVarList>

<ForDoVarString>in</ForDoVarString>

<ReturnTemplate>return %s1</ReturnTemplate>

<FunctionCallTemplate>%s1</FunctionCallTemplate>

<InstrTemplate>%s1</InstrTemplate>

<InputTemplate>%s1</InputTemplate>

<OutputTemplate>%s1</OutputTemplate>

<TextTemplate>...
%s1
...</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<ProgramHeaderTemplate># %s2 program generated by devFlowcharter
# for %s1 project
#
#	%s3

</ProgramHeaderTemplate>

<FunctionHeaderArgsEntryMask>%s1, </FunctionHeaderArgsEntryMask>

<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<FunctionHeaderTemplate>%s2
def %s1(%s3):
</FunctionHeaderTemplate>

<ProgramTemplate>	%s2	
	%b1
</ProgramTemplate>

<FunctionTemplate>%s1
	%s3

</FunctionTemplate>

<FunctionsTemplate>%s1</FunctionsTemplate>

<MainProgramTemplate>
%b1
</MainProgramTemplate>

<VarEntry>%s1%s4</VarEntry>

<VarEntryArray>%s1%s4</VarEntryArray>

<VarEntryInit> = %s1</VarEntryInit>

<VarEntryInitExtern> = %s1</VarEntryInitExtern>

<VarTemplate>%s1
</VarTemplate>

<LibTemplate>import %s2

</LibTemplate>

<LibEntryList>%s, </LibEntryList>

<LibEntryListStripCount>2</LibEntryListStripCount>

<!--
Element DataTypesTemplate
Description: Template for data types section
Available placeholders:
   %s1 - list of data type declarations  
-->
<DataTypesTemplate>type
	%s1

</DataTypesTemplate>

<!--
Element DataTypeIntMask
Description: Template for integer number types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - data type name  
-->
<DataTypeIntMask>%s1 = integer;</DataTypeIntMask>

<!--
Element DataTypeRealMask
Description: Template for real number types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name  
-->
<DataTypeRealMask>%s1 = real;</DataTypeRealMask>

<!--
Element DataTypeOtherMask
Description: Template for other types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name
   %s2 - base type
-->
<DataTypeOtherMask>%s1 = %s2;</DataTypeOtherMask>

<!--
Element DataTypeArrayMask
Description: Template for other types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - array type name
   %s2 - base array type
   %s3 - array type size   
-->
<DataTypeArrayMask>%s1 = %s2%s3;</DataTypeArrayMask>

<!--
Element DataTypeRecordTemplate
Description: Template for record type
Available placeholders:
   %s1 - record name 
   %s2 - list of fields (DataTypeRecordFieldMask or DataTypeRecordFieldArrayMask elements)
-->
<DataTypeRecordTemplate>%s1 = record
BEGIN
	%s2
END;

</DataTypeRecordTemplate>

<!--
Element DataTypeRecordFieldMask
Description: Entry for single field (non-array) of record
Available placeholders:
   %s1 - field name
   %s2 - field type
   %s4 - used if field is a record (element FunctionHeaderArgsEntryRecord)
   %s5 - used if field is an enumeration (element FunctionHeaderArgsEntryEnum)
-->
<DataTypeRecordFieldMask>%s4%s5%s2 %s1;</DataTypeRecordFieldMask>

<!--
Element DataTypeRecordFieldArrayMask
Description: Entry for single field (array) of record
Available placeholders are the same as for DataTypeRecordFieldMask element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<DataTypeRecordFieldArrayMask>%s4%s5%s2 %s1%s3;</DataTypeRecordFieldArrayMask>

<!--
Element DataTypeEnumTemplate
Description: Template for enumeration type
Available placeholders:
   %s1 - enumeration name 
   %s2 - list of values (list of DataTypeEnumEntryList elements)
-->
<DataTypeEnumTemplate>%s1 = (%s2);</DataTypeEnumTemplate>

<!--
Element DataTypeEnumEntryList
Description: Mask for list of enumerated values
Available placeholders:
   %s - enumerated value
-->
<DataTypeEnumEntryList>%s, </DataTypeEnumEntryList>

<!--
Element DataTypeEnumEntryListStripCount
Description: It contains number of chars to strip from end of enumeration values list (element DataTypeEnumEntryList); in given example ending to be stripped is ", " 
-->
<DataTypeEnumEntryListStripCount>2</DataTypeEnumEntryListStripCount>

<!--
Element UserTypeDesc
Description: Mask for user datatype description
Available placeholders:
   %s1 - type name
   %s2 - type kind
-->
<UserTypeDesc>%s2 %s1</UserTypeDesc>

</Language>