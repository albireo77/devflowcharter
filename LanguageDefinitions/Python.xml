<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Python language definition file for devFlowcharter.
It may not contain all supported tags. For all supported tags and their descriptions go to file Example.xml
-->

<Language>
    <Name>Python 3</Name>
    <CommentBegin>#</CommentBegin>
    <InputFunction>input()</InputFunction>
    <OutputFunction>print()</OutputFunction>
    <DefaultExt>py</DefaultExt>
    <LibraryExt>.py</LibraryExt>
    <AssignOperator>=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>
    <DecimalSeparator>.</DecimalSeparator>
    <InOutCursorPos>-1</InOutCursorPos>
    <FuncBracketsCursorPos>-1</FuncBracketsCursorPos>
			
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledPointers>false</EnabledPointers>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <EnabledUserDataTypes>false</EnabledUserDataTypes>
    <CaseSensitiveSyntax>true</CaseSensitiveSyntax>
    <AllowEnumsInForLoop>true</AllowEnumsInForLoop>
    <AllowUserFunctionOverload>true</AllowUserFunctionOverload>
    <AllowUnboundedArrays>true</AllowUnboundedArrays>

    <NativeDataTypes>
        <DataType>General</DataType>
    </NativeDataTypes>

    <KeyWords>
	<KeyWord>and</KeyWord>
	<KeyWord>assert</KeyWord>
	<KeyWord>break</KeyWord>
	<KeyWord>class</KeyWord>
	<KeyWord>continue</KeyWord>
	<KeyWord>def</KeyWord>
	<KeyWord>del</KeyWord>
	<KeyWord>elif</KeyWord>
	<KeyWord>else</KeyWord>
	<KeyWord>except</KeyWord>
	<KeyWord>exec</KeyWord>
	<KeyWord>finally</KeyWord>
	<KeyWord>for</KeyWord>
	<KeyWord>from</KeyWord>
	<KeyWord>global</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>import</KeyWord>
        <KeyWord>in</KeyWord>
        <KeyWord>is</KeyWord>
        <KeyWord>lambda</KeyWord>
        <KeyWord>not</KeyWord>
	<KeyWord>or</KeyWord>
	<KeyWord>pass</KeyWord>
	<KeyWord>print</KeyWord>
	<KeyWord>raise</KeyWord>
	<KeyWord>return</KeyWord>
	<KeyWord>try</KeyWord>
	<KeyWord>while</KeyWord>
	<KeyWord>with</KeyWord>
	<KeyWord>yield</KeyWord>
    </KeyWords>
	
<ProcedureLabelKey>ProcedureLabelPython</ProcedureLabelKey>
<FunctionLabelKey>FunctionLabelPython</FunctionLabelKey>
<ProgramLabelKey>ProgramLabelPython</ProgramLabelKey>

<LabelWhile>while</LabelWhile>
<LabelRepeat>repeat until</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>case</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>func call</LabelFuncCall>
<LabelReturn>return</LabelReturn>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<ElseLabel>else</ElseLabel>

<HighLighterVarName>SynPythonSyn1</HighLighterVarName>

<!--
Element FileContentsTemplate
Description: Template to define source file layout
Available placeholders:
   %s1 - project name
   %s2 - program header section (element ProgramHeaderTemplate)
   %s3 - libraries section (element LibTemplate)
   %s4 - global constants section (element ConstTemplate)
   %s5 - global variables section (element VarTemplate)
   %s6 - user datatypes section (element DataTypesTemplate)
   %s7 - user functions section (element FunctionsTemplate)
   %s8 - main function (element MainFunctionTemplate)
-->
<FileContentsTemplate>%s2

%s3

%s4

%s5

%s7

%s8
</FileContentsTemplate>

<WhileTemplate>while %s1:
	%b1
</WhileTemplate>

<IfTemplate>if %s1:
	%b1
</IfTemplate>

<IfElseTemplate>if %s1:
	%b1
else:
	%b2
</IfElseTemplate>

<RepeatUntilTemplate>while True:
	%b1
	if %s1:
		break
</RepeatUntilTemplate>

<ForDoVarList>false</ForDoVarList>

<ForDoVarString>in</ForDoVarString>

<!-- ForDoTemplate is not existing here since code generation of this block is hardcoded for Python -->

<ReturnTemplate>return %s1</ReturnTemplate>

<FunctionCallTemplate>%s1</FunctionCallTemplate>

<InstrTemplate>%s1</InstrTemplate>

<InputTemplate>%s1</InputTemplate>

<OutputTemplate>%s1</OutputTemplate>

<TextTemplate>...
%s1
...</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<ProgramHeaderTemplate># %s2 program generated by devFlowcharter
# for %s1 project
#
#	%s3

</ProgramHeaderTemplate>

<FunctionHeaderArgsEntryMask>%s1%s7, </FunctionHeaderArgsEntryMask>

<FunctionHeaderArgsEntryDefault> = %s</FunctionHeaderArgsEntryDefault>

<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<FunctionHeaderTemplate>%s2
def %s1(%s3):
</FunctionHeaderTemplate>

<FunctionBodyTemplate>	%s2	
	%b1
</FunctionBodyTemplate>

<FunctionTemplate>%s1
	%s3

</FunctionTemplate>

<FunctionsTemplate>%s1</FunctionsTemplate>

<MainFunctionTemplate>
%b1

</MainFunctionTemplate>

<VarEntry>%s1%s4</VarEntry>

<VarEntryArray>%s1%s4</VarEntryArray>

<VarEntryInit> = %s1</VarEntryInit>

<VarEntryInitExtern> = %s1</VarEntryInitExtern>

<VarTemplate>%s1
</VarTemplate>

<LibTemplate>import %s2

</LibTemplate>

<LibEntryList>%s, </LibEntryList>

<LibEntryListStripCount>2</LibEntryListStripCount>

</Language>