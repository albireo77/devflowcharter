<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Pascal language definition file for devFlowcharter.
It may not contain all supported tags. For all supported tags and their descriptions go to file Example.xml
-->

<Language>

    <Name>Pascal</Name>
    <CommentBegin>{</CommentBegin>
    <CommentEnd>}</CommentEnd>
    <InputFunction>readln()</InputFunction>
    <OutputFunction>writeln()</OutputFunction>
    <InOutCursorPos>-1</InOutCursorPos>
    <DefaultExt>pas</DefaultExt>
    <LibraryExt>.tpu</LibraryExt>
    <AssignOperator>:=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>
    <FuncBracketsCursorPos>1</FuncBracketsCursorPos>
    <InstrEnd>;</InstrEnd>

    <EnabledConsts>true</EnabledConsts>
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledUserDataTypes>true</EnabledUserDataTypes>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <CaseSensitiveSyntax>false</CaseSensitiveSyntax>
    <UpperCaseConstId>true</UpperCaseConstId>
    <AllowEnumsInForLoop>true</AllowEnumsInForLoop>
    <AllowUnboundedArrays>true</AllowUnboundedArrays>

    <FoldRegions>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtKeyword" WholeWords="true">
            <Open Keyword="begin"/>
            <Close Keyword="end"/>
        </FoldRegion>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtKeyword" WholeWords="true">
            <Open Keyword="try"/>
            <Close Keyword="end"/>
        </FoldRegion>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtKeyword" WholeWords="true">
            <Open Keyword="case"/>
            <Close Keyword="end"/>
	    </FoldRegion>		
        <FoldRegion AddClose="true" NoSubFolds="true" Type="rtChar" WholeWords="true">
            <Open Keyword="{"/>
            <Close Keyword="}"/>
        </FoldRegion>
    </FoldRegions>
<!-- It is strongly suggested not to modify (remove any or change order) first 8 data types -->
<!-- These are used in fixed order by internal Pascal parser -->
    <NativeDataTypes>
        <DataType kind="int">integer</DataType>
        <DataType kind="real">real</DataType>
        <DataType kind="string">string</DataType>
        <DataType kind="bool">boolean</DataType>
        <DataType kind="ptr" origtype="integer">^integer</DataType>
        <DataType kind="ptr" origtype="real">^real</DataType>
        <DataType kind="ptr" origtype="string">^string</DataType>
        <DataType>text</DataType>
        <DataType kind="int">char</DataType>
    </NativeDataTypes>
    <KeyWords>
        <KeyWord>asm</KeyWord>
        <KeyWord>array</KeyWord>
        <KeyWord>begin</KeyWord>
        <KeyWord>case</KeyWord>
        <KeyWord>const</KeyWord>
        <KeyWord>constructor</KeyWord>
        <KeyWord>destructor</KeyWord>
        <KeyWord>div</KeyWord>
        <KeyWord>do</KeyWord>
        <KeyWord>downto</KeyWord>
        <KeyWord>else</KeyWord>
        <KeyWord>end</KeyWord>
        <KeyWord>exports</KeyWord>
        <KeyWord>file</KeyWord>
        <KeyWord>for</KeyWord>
        <KeyWord>function</KeyWord>
        <KeyWord>goto</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>implementation</KeyWord>
        <KeyWord>in</KeyWord>
        <KeyWord>inherited</KeyWord>
        <KeyWord>inline</KeyWord>
        <KeyWord>interface</KeyWord>
        <KeyWord>label</KeyWord>
        <KeyWord>library</KeyWord>
        <KeyWord>mod</KeyWord>
        <KeyWord>nil</KeyWord>
        <KeyWord>not</KeyWord>
        <KeyWord>object</KeyWord>
        <KeyWord>of</KeyWord>
        <KeyWord>or</KeyWord>
        <KeyWord>packed</KeyWord>
        <KeyWord>procedure</KeyWord>
        <KeyWord>program</KeyWord>
        <KeyWord>record</KeyWord>
        <KeyWord>repeat</KeyWord>
        <KeyWord>set</KeyWord>
        <KeyWord>shl</KeyWord>
        <KeyWord>shr</KeyWord>
        <KeyWord>string</KeyWord>
        <KeyWord>then</KeyWord>
        <KeyWord>to</KeyWord>
        <KeyWord>type</KeyWord>
        <KeyWord>unit</KeyWord>
        <KeyWord>until</KeyWord>
        <KeyWord>uses</KeyWord>
        <KeyWord>var</KeyWord>
        <KeyWord>while</KeyWord>
        <KeyWord>with</KeyWord>
        <KeyWord>xor</KeyWord>
    </KeyWords>
	
<!--
Native function declarations will follow.
Attributes details:
- brackets: will be appended after function name
- bracketsCursorPos: cursor position that will be set inside brackets
- hint: will be displayed in status bar
- caption: if present, it will be displayed in menu instead of function name; useful for overloaded functions to describe possible parameters
- library: library containing function
-->
    <NativeFunctions>
        <Function brackets="()" bracketsCursorPos="1" hint="function Sin(X: Extended): Extended - return sine of argument X, where X is angle in radians.">Sin</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Cos(X: Extended): Extended - return cosine of argument X, where X is angle in radians.">Cos</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Tan(X: Float): Float - return tangent of argument X, where X is angle (other than pi/2 or 3*pi/2) in radians.">Tan</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Cotan(X: Float): Float - return cotangent of argument X, where X is angle (other than zero) in radians.">Cotan</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Ln(X: Extended): Extended - return natural logarithm of argument X, which must be positive.">Ln</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Exp(X: Extended): Extended - return exponent of X (number e to the power X).">Exp</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Sqr(X: Extended): Extended - return square of argument X.">Sqr</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Random(L: LongInt): LongInt - return random number larger or equal to 0 and less than L.">Random</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Trunc(X: Extended): Int64 - return integer part of argument X, which is always smaller than (or equal to) X in absolute value.">Trunc</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Abs(X: Extended): Extended - return absolute value of argument X, which can be any numerical type.">Abs</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Length(S: String): Integer - return length of string S." caption="Length(String)">Length</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Length(A: DynArrayType): Integer - return length of dynamic array A." caption="Length(dynamic array)">Length</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Sqrt(X: Extended): Extended - return square root of argument X, which must be positive.">Sqrt</Function>
        <Function hint="procedure Randomize - initialize random number generator.">Randomize</Function>
        <Function brackets="(,)" bracketsCursorPos="1" hint="procedure SetLength(var S: String; Len: Integer) - set length of string S to Len." caption="SetLength(String, len)">SetLength</Function>
        <Function brackets="(,)" bracketsCursorPos="1" hint="procedure SetLength(var A: DynArrayType; Len: Integer) - set length of dynamic array A to Len." caption="SetLength(dynamic array, len)">SetLength</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure New(var P: Pointer) - allocate new instance of the type pointed by P, and put the address in P.">New</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Dispose(P: Pointer) - release memory allocated by call to New. Released memory is returned to the heap.">Dispose</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Write(Args: Arguments) - write contents of variables given in arguments to standard output." caption="Write(args)">Write</Function>
        <Function brackets="(,)" bracketsCursorPos="1" hint="procedure Write(var F: Text; Args: Arguments) - write contents of variables given in arguments to the file F." caption="Write(file, args)">Write</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Writeln(Args: Arguments) - write contents of variables given in arguments to standard output and go the next line." caption="Writeln(args)">Writeln</Function>
        <Function brackets="(,)" bracketsCursorPos="1" hint="procedure Writeln(var F: Text; Args: Arguments) - write contents of variables given in arguments to the file F and go the next line." caption="Writeln(file, args)">Writeln</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Read(Args: Arguments) - read one or more values from standard input, and store result in arguments V1, V2, etc." caption="Read(args)">Read</Function>
        <Function brackets="(,)" bracketsCursorPos="1" hint="procedure Read(var F: Text; Args: Arguments) - read one or more values from file F, and store result in arguments V1, V2, etc." caption="Read(file, args)">Read</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Readln(Args: Arguments) - read one or more values from standard input, store result in arguments V1, V2, etc and go to the next line." caption="Readln(args)">Readln</Function>
        <Function brackets="(,)" bracketsCursorPos="1" hint="procedure Readln(var F: Text; Args: Arguments) - read one or more values from file F, store result in arguments V1, V2, etc. and go to the next line." caption="Readln(file, args)">Readln</Function>
        <Function hint="function Pi: Extended - return value of Pi (3.1415926535897932385).">Pi</Function>
        <Function hint="procedure Break - jump to the statement following the end of current repetitive statement. Code between Break and the end of repetitive statement is skipped.">Break</Function>
        <Function hint="procedure Continue - jump to the end of current repetitive statement. Code between Continue and the end of repetitive statement is skipped.">Continue</Function>
        <Function hint="procedure Exit - exit current subroutine. If invoked in the main program routine, Exit stops the program.">Exit</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Exit(X: TAnyType) - exit current subroutine and return value X. If invoked in the main program routine, Exit stops the program." caption="Exit(value)">Exit</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Reset(F: File) - open a file F for reading. F can be any file type.">Reset</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Rewrite(F: File) - open a file F for writing. F can be any file type.">Rewrite</Function>
        <Function brackets="(,)" bracketsCursorPos="1" hint="procedure Assign(F: File; FileName: String) - assign a name to F, which can be any file type.">Assign</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Close(F: File) - flush the buffer of the file F and close F.">Close</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="procedure Append(F: Text) - open an existing file in append mode. Any data written to F will be appended to the file.">Append</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Eof(F: File): Boolean - return True if the file-pointer has reached end of the file, or if the file is empty.">Eof</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Eoln(F: File): Boolean - return True if file pointer has reached end of line or file">Eoln</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Ord(X: TOrdinal): LongInt - return the Ordinal value of a ordinal-type variable X.">Ord</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function Chr(X: Byte): Char - return the character which has ASCII value X.">Chr</Function>
    </NativeFunctions>

<!--
Element ProcedureLabelKey
Description: Key for abel displayed for flowchart of function that returns nothing (type = none).
It should contain name of key (free to be added) present in translation file (.lng) in Others section
-->
<ProcedureLabelKey>ProcedureLabelPascal</ProcedureLabelKey>

<!--
Element ConstructorLabelKey
Description: Key for label displayed for constructor flowchart
-->
<ConstructorLabelKey>ConstructorLabelPascal</ConstructorLabelKey>

<!--
Element FunctionLabelKey
Description: Key for label displayed for flowchart of function that returns some data
-->
<FunctionLabelKey>FunctionLabelPascal</FunctionLabelKey>

<!--
Element ProgramLabelKey
Description: Key for label displayed for flowchart of project's main program
-->
<ProgramLabelKey>ProgramLabelPascal</ProgramLabelKey>

<HighLighterVarName>SynPasSyn1</HighLighterVarName>

<!--
Element ProgramHeaderTemplate
Available placeholders:
   %s1 - project name
   %s2 - language name
   %s3 - text from comment marked as Program Header
   %s4 - code generation timestamp
   %s5 - language definition file used for code generation
-->
<ProgramHeaderTemplate>{
	%s2 program generated by devFlowcharter
	for %s1 project
	%s3
}

</ProgramHeaderTemplate>

<!--
Element LibTemplate
Description: Template for section containing libraries
Available placeholders:
   %s1 - list of libraries as separated entries (list of LibEntry elements) 
   %s2 - list of libraries as single list (element LibEntryList)
Notice: %s1 and %s2 placeholders should be used interchangeably
-->
<LibTemplate>uses
	%s2;
</LibTemplate>

<LibEntryList>%s, </LibEntryList>
<LibEntryListStripCount>2</LibEntryListStripCount>

<WhileTemplate>while %s1 do
begin
	%b1
end;
</WhileTemplate>

<RepeatUntilTemplate>repeat
	%b1
until %s1;
</RepeatUntilTemplate>

<IfTemplate>if %s1 then
begin
	%b1
end;
</IfTemplate>

<IfElseTemplate>if %s1 then
begin
	%b1
end
else
begin
	%b2
end;
</IfElseTemplate>

<LabelWhile>while</LabelWhile>
<LabelRepeat>repeat until</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>case</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>func call</LabelFuncCall>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<ElseLabel>else</ElseLabel>

<!--
Element FileContentsTemplate
Description: Template to define source file layout
Available placeholders:
   %s1 - project name
   %s2 - program header section (element ProgramHeaderTemplate)
   %s3 - libraries section (element LibTemplate)
   %s4 - global constants section (element ConstTemplate)
   %s5 - global variables section (element VarTemplate)
   %s6 - user datatypes section (element DataTypesTemplate)
   %s7 - user functions section (element FunctionsTemplate)
   %s8 - main function (element MainFunctionTemplate)
-->
<FileContentsTemplate>%s2

%s3

%s4

%s6

%s5

%s7

%s8
</FileContentsTemplate>

<RepeatUntilDescTemplate>repeat until %s1</RepeatUntilDescTemplate>

<ReturnDescTemplate>exit %s1;</ReturnDescTemplate>

<ForDoVarList>true</ForDoVarList>

<ForDoVarString>:=</ForDoVarString>

<!--
Element ForDoTemplate
Available placeholders:
   %s1 - control variable
   %s2 - start value
   %s3 - stop value
   %s4 - first "increasing or decreasing" modifier string (element ForDoTemplateModifier1)
   %s5 - second "increasing or decreasing" modifier string (element ForDoTemplateModifier2)  
-->
<ForDoTemplate>for %s1 := %s2 %s4 %s3 do
begin
	%b1
end;
</ForDoTemplate>

<!--
Element ForDoTemplateModifier1
Description: It returns value based on whether for..do block is increasing or decreasing
It returns value "to" if block is increasing or "downto" if decreasing 
-->
<ForDoTemplateModifier1>to|downto</ForDoTemplateModifier1>

<CaseOfValueTemplate>%s1:
begin
	%b1
end;
</CaseOfValueTemplate>

<CaseOfDefaultValueTemplate>else
	%b1
</CaseOfDefaultValueTemplate>

<CaseOfTemplate>case %s1 of
	%s2
%s3
end;
</CaseOfTemplate>

<TextTemplate>{ %s1 }</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<FunctionCallTemplate>%s1;</FunctionCallTemplate>

<InstrTemplate>%s1;</InstrTemplate>

<InputTemplate>%s1;</InputTemplate>

<OutputTemplate>%s1;</OutputTemplate>

<!--
Element MainFunctionTemplate
Description: Template for main program body
Available placeholders:
   %s1 - project name
   %s2 - global variables (element VarTemplate)
   %s3 - return statement which is generated if last statement of program isn't return block (element ProgramReturnTemplate)
   %b1 - main function body
-->
<MainFunctionTemplate>begin
	%b1
end.
</MainFunctionTemplate>

<!--
Element FunctionBodyTemplate
Description: Template for function body
Available placeholders:
   %s1 - function name
   %s2 - function local variables (element VarTemplate)
   %b1 - body of function  
-->
<FunctionBodyTemplate>begin
	%b1
end;
</FunctionBodyTemplate>

<!--
Element FunctionHeaderTemplate
Description: Template for function header
Available placeholders:
   %s1 - name of the function
   %s2 - description/prefix of the function (element FunctionHeaderDescTemplate)
   %s3 - list of function parameters (list of FunctionHeaderArgsEntryMask elements)
   %s4 - return type
   %s5 - first string that depends if return type is none or specific (element FunctionHeaderTypeModifier1) 
   %s6 - second string that depends if return type is none or specific (element FunctionHeaderTypeModifier2)
   %s7 - string that depends if function is external or not (element FunctionHeaderExternalModifier); see also description for element ExternalLabel 
   %s8 - string that depends if function return type is array or not (element FunctionHeaderTypeArrayModifier)
   %s9 - string that depends if function is of static context (element FunctionHeaderStaticModifier); see also description for element StaticLabel     
-->
<FunctionHeaderTemplate>%s2
%s5 %s1(%s3)%s6 %s4;
</FunctionHeaderTemplate>

<!--
Element ConstructorHeaderTemplate
Description: Template for constructor header; it is used when constructor checkbox is checked
Available placeholders are the same as for element FunctionHeaderTemplate.    
-->
<ConstructorHeaderTemplate>%s2
constructor %s1(%s3);
</ConstructorHeaderTemplate>

<!--
Element FunctionHeaderTypeModifier1 and FunctionHeaderTypeModifier2
Description: It returns value based on whether or not function returns specific type
In given example, it returns value "procedure" if function type is none or "function" if not
-->
<FunctionHeaderTypeModifier1>procedure|function</FunctionHeaderTypeModifier1>
<FunctionHeaderTypeModifier2>|:</FunctionHeaderTypeModifier2>

<!--
Element FunctionHeaderArgsEntryMask
Available placeholders:
   %s1 - argument name
   %s2 - argument type
   %s3 - used if argument is passed by reference (element FunctionHeaderArgsEntryRef)
   %s4 - used if argument is an array (element FunctionHeaderArgsEntryArray)
   %s5 - used if argument is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if argument is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - expression for argument default value (element FunctionHeaderArgsEntryDefault)
-->
<FunctionHeaderArgsEntryMask>%s3%s1: %s4%s2%s7; </FunctionHeaderArgsEntryMask>

<FunctionHeaderArgsEntryRef>var </FunctionHeaderArgsEntryRef>
<FunctionHeaderArgsEntryArray>array of </FunctionHeaderArgsEntryArray>
<FunctionHeaderArgsEntryDefault> = %s</FunctionHeaderArgsEntryDefault>
<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<VarEntryArraySize>1..%s, </VarEntryArraySize>
<VarEntryArraySizeStripCount>2</VarEntryArraySizeStripCount>

<!--
Element FunctionTemplate
Description: Template for function (header + body)
Available placeholders:
   %s1 - function's header line (element FunctionHeaderTemplate or ConstructorHeaderTemplate)
   %s2 - function's local variables (element VarTemplate)
   %s3 - function's body (element FunctionBodyTemplate)  
-->
<FunctionTemplate>%s1
%s2
%s3

</FunctionTemplate>

<!--
Element FunctionsTemplate
Description: Template for user functions section
Available placeholders:
   %s1 - list of function declarations (list of FunctionTemplate elements)  
-->
<FunctionsTemplate>%s1</FunctionsTemplate>

<!--
Element ConstTemplate
Description: Template for section to declare constants
Available placeholders:
   %s1 - list of constants (ConstEntry elements) 
-->
<ConstTemplate>const
	%s1
</ConstTemplate>

<!--
Element ConstEntry
Description: Entry for single declaration of constant
Available placeholders:
   %s1 - constant name
   %s2 - constant value
   %s3 - string depending if constant is external (element ConstExternModifier)
   %s4 - constant type expression (element ConstTypeModifier)
-->
<ConstEntry>%s1 = %s2;</ConstEntry>

<!--
Element PointerTypeMask
Description: Mask to create pointer type based on given type
-->
<PointerTypeMask>^%s</PointerTypeMask>

<!--
Element DataTypesTemplate
Description: Template for data types section.
Available placeholders:
   %s1 - list of data type declarations  
-->
<DataTypesTemplate>type
	%s1
</DataTypesTemplate>

<!--
Element DataTypeOtherMask
Description: Template for other types.
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name
   %s2 - base type
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)
-->
<DataTypeOtherMask>%s1 = %s2;</DataTypeOtherMask>

<!--
Element DataTypeArrayMask
Description: Template for array type.
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - array type name
   %s2 - base array type
   %s3 - array type size
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)   
-->
<DataTypeArrayMask>%s1 = array[%s3] of %s2;</DataTypeArrayMask>

<!--
Element DataTypeUnboundedArrayMask
Description: Template for unbounded (no size) array type.
If unbounded array expression can be generated with DataTypeArrayMask element, this one should be empty or removed.
This element is only effective if unbounded arrays are allowed by language (element AllowUnboundedArrays).
Available placeholders:
   %s1 - array type name
   %s2 - base array type
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)   
-->
<DataTypeUnboundedArrayMask>%s1 = array of %s2;</DataTypeUnboundedArrayMask>

<!--
Element DataTypeRecordTemplate
Description: Template for record type; see also description for RecordLabel element
Available placeholders:
   %s1 - record name 
   %s2 - list of fields (DataTypeRecordFieldMask or DataTypeRecordFieldArrayMask elements)
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)
-->
<DataTypeRecordTemplate>%s1 = record
	%s2
end;

</DataTypeRecordTemplate>

<!--
Element DataTypeRecordFieldMask
Description: Entry for single field (non-array) of record
Available placeholders:
   %s1 - field name
   %s2 - field type
   %s4 - used if field is a record (element FunctionHeaderArgsEntryRecord)
   %s5 - used if field is an enumeration (element FunctionHeaderArgsEntryEnum)
-->
<DataTypeRecordFieldMask>%s1: %s2;</DataTypeRecordFieldMask>

<!--
Element DataTypeRecordFieldArrayMask
Description: Entry for single field (array) of record
Available placeholders are the same as for DataTypeRecordFieldMask element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<DataTypeRecordFieldArrayMask>%s1: array[%s3] of %s2;</DataTypeRecordFieldArrayMask>

<!--
Element DataTypeEnumTemplate
Description: Template for enumeration type
Available placeholders:
   %s1 - enumeration name 
   %s2 - list of values (list of DataTypeEnumEntryList elements)
-->
<DataTypeEnumTemplate>%s1 = (%s2);</DataTypeEnumTemplate>

<!--
Element DataTypeEnumEntryList
Description: Mask for list of enumerated values
Available placeholders:
   %s - enumerated value
-->
<DataTypeEnumEntryList>%s, </DataTypeEnumEntryList>

<!--
Element DataTypeEnumEntryListStripCount
Description: It contains number of chars to strip from end of enumeration values list (element DataTypeEnumEntryList).
Ending to be stripped is ", " 
-->
<DataTypeEnumEntryListStripCount>2</DataTypeEnumEntryListStripCount>

<!--
Element UserTypeDesc
Description: Mask for user datatype description
Available placeholders:
   %s1 - type name
   %s2 - type kind
-->
<UserTypeDesc>%s2 %s1</UserTypeDesc>

</Language>