<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Reference language definition file for devFlowcharter.
It contains all supported tags.
To create file for new language just Save As this file and modify new file according to your needs. 
Most of the tags are optional and may be removed if not needed. The key and mandatory tag is FileContentsTemplate that defines source file layout.
The only valid character to set indent level in elements responsible for code generation (e.g. FileContentsTemplate) is TAB. Whitespaces will not work.
-->

<Language>
    <Name>Example</Name>
    <CommentBegin>/*</CommentBegin>			<!-- if language supports only single-line comments then CommentBegin tag -->
    <CommentEnd>*/</CommentEnd>				<!-- should contain comment symbol and CommentEnd tag should be empty or removed -->
    <InputFunction>in()</InputFunction>
    <OutputFunction>out()</OutputFunction>
    <InOutCursorPos>-1</InOutCursorPos>			<!-- cursor position for Input/OutputFunction; negative or zero: counted from end; positive: counted from beginning -->
    <DefaultExt>txt</DefaultExt>
    <LibraryExt>.lib</LibraryExt>
    <AssignOperator>=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>						<!-- brackets added to NativeFunctions -->
    <FuncBracketsCursorPos>1</FuncBracketsCursorPos>	<!-- cursor position for FuncBrackets; counted from beginning -->
    <DecimalSeparator>.</DecimalSeparator>
    <InstrEnd>;</InstrEnd>

    <EnabledConsts>true</EnabledConsts>			<!-- false or 0 is false, true or not 0 is true -->				
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledUserDataTypes>true</EnabledUserDataTypes>
    <EnabledUserDataTypeInt>true</EnabledUserDataTypeInt>
    <EnabledUserDataTypeReal>true</EnabledUserDataTypeReal>
    <EnabledUserDataTypeOther>true</EnabledUserDataTypeOther>
    <EnabledUserDataTypeEnum>true</EnabledUserDataTypeEnum>
    <EnabledUserDataTypeArray>true</EnabledUserDataTypeArray>
    <EnabledPointers>true</EnabledPointers>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <CaseSensitiveSyntax>false</CaseSensitiveSyntax>
    <UpperCaseConstId>true</UpperCaseConstId>
    <AllowEnumsInForLoop>true</AllowEnumsInForLoop>
    <AllowUserFunctionOverload>true</AllowUserFunctionOverload>
    <AllowUnboundedArrays>false</AllowUnboundedArrays>
    <AllowDuplicatedLibs>false</AllowDuplicatedLibs>
    <AllowTransExternVarConst>false</AllowTransExternVarConst>
    <AllowTransExternFunction>false</AllowTransExternFunction>
    <AllowTransExternDataType>false</AllowTransExternDataType>
    <CodeIncludeExternVarConst>false</CodeIncludeExternVarConst>
    <CodeIncludeExternDataType>false</CodeIncludeExternDataType>
    <CodeIncludeExternFunction>false</CodeIncludeExternFunction>

    <FoldRegions>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtKeyword" WholeWords="true">
            <Open Keyword="BEGIN"/>
            <Close Keyword="END"/>
        </FoldRegion>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtKeyword" WholeWords="true">
            <Open Keyword="case"/>
            <Close Keyword="END"/>
        </FoldRegion>
        <FoldRegion AddClose="true" NoSubFolds="true" Type="rtKeyword" WholeWords="true">
            <Open Keyword="/*"/>
            <Close Keyword="*/"/>
        </FoldRegion>
    </FoldRegions>
<!--
Native data type declarations will follow.
Attributes details:
- kind: valid values are int real string bool ptr other;
  if attribute "kind" is missing, data type is qualified as "other" kind;
  "ptr" value determines pointer type;
  origtype attribute determines original type for pointer type;
  pointer types must be declared AFTER their original ones.
- generic: valid values are true false; determines if type is generic; mainly designed for Java
- library: library name containing data type 
-->
    <NativeDataTypes>
        <DataType kind="int">bigInt</DataType>
        <DataType kind="int">smallInt</DataType>
        <DataType kind="int">character</DataType>
        <DataType kind="bool">bool</DataType>
        <DataType kind="real">float</DataType>
        <DataType kind="ptr" origtype="bigInt">bigInt*</DataType>
        <DataType kind="other" generic="true" library="somelibrary">List</DataType>
    </NativeDataTypes>
    <KeyWords>
        <KeyWord>BEGIN</KeyWord>
        <KeyWord>END</KeyWord>
        <KeyWord>while</KeyWord>
        <KeyWord>for</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>else</KeyWord>
    </KeyWords>
<!--
Native function declarations will follow.
Attributes details:
- brackets: will be appended after function name
- bracketsCursorPos: cursor position that will be set inside brackets
- hint: will be displayed in status bar
- caption: if present, it will be displayed in menu instead of function name; useful for overloaded functions to describe possible parameters
- library: library containing function
-->
    <NativeFunctions>
        <Function brackets="()" bracketsCursorPos="1" hint="function sin(X: float): float - return sine of argument X, where X is angle in radians.">sin</Function>
        <Function brackets="()" bracketsCursorPos="1" hint="function cos(X: float): float - return cosine of argument X, where X is angle in radians.">cos</Function>
    </NativeFunctions>

<!--
Element ProcedureLabelKey
Description: Key for label displayed for flowchart of function that returns nothing (type = none).
It should contain name of key (free to be added) present in translation file (.lng) in Others section
-->
<ProcedureLabelKey>ProcedureLabelExample</ProcedureLabelKey>

<!--
Element FunctionLabelKey
Description: Key for label displayed for flowchart of function that returns some data
-->
<FunctionLabelKey>FunctionLabelExample</FunctionLabelKey>

<!--
Element ConstructorLabelKey
Description: Key for label displayed for constructor flowchart
-->
<ConstructorLabelKey>ConstructorLabelExample</ConstructorLabelKey>

<!--
Element ProgramLabelKey
Description: Key for label displayed for flowchart of project's main program
-->
<ProgramLabelKey>ProgramLabelExample</ProgramLabelKey>

<!--
Block label elements will follow.
Will be displayed in flowchart for given blocks.
-->
<LabelWhile>while</LabelWhile>
<LabelRepeat>repeat until</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>Case</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>func call</LabelFuncCall>
<LabelReturn>return</LabelReturn>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<ElseLabel>else</ElseLabel>

<!--
Element RepeatUntilDescTemplate
DescTemplate elements are used in Explorer window to display description of some troublesome blocks when it's impossible to extract proper description from block template.
Procedure for building description for flowchart elements in Explorer window is as follows:
	1. Use value proper DescTemplate element if it exists and is not empty, otherwise
	2. Use value from expression extracted from block template (e.g. from ForDoTemplate element); if such element does not exist or no expression placeholder (%s1) is found then
	3. Use value returned by hardcoded Delphi procedure 
Available placeholder:
   %s1 - condition expression 
-->
<RepeatUntilDescTemplate>repeat until %s1</RepeatUntilDescTemplate>

<!--
Element ReturnDescTemplate
Available placeholder:
   %s1 - return expression
-->
<!-- 
<ReturnDescTemplate>return %s1</ReturnDescTemplate>
-->

<!--
Element ForDoDescTemplate
Available placeholders:
   %s1 - control variable
   %s2 - begin value
   %s3 - end value
-->
<!-- 
<ForDoDescTemplate>for %s1 = %s2 to %s2</ForDoDescTemplate>
-->

<!--
Element CaseOfDescTemplate
Available placeholder:
   %s1 - case expression
-->
<!-- 
<CaseOfDescTemplate>case %s1 of</CaseOfDescTemplate>
-->

<!--
Element HighLighterVarName
Contains name of highlighter component
Currently there are 4 highlighter components available:
SynCppSyn1 for C and C++
SynPasSyn1 for Pascal
SynPythonSyn1 for Python
SynJavaSyn1 for Java
-->
<!--
<HighLighterVarName></HighLighterVarName>
-->

<!--
Element ConstIDSpecChars
Character string containing special characters that are valid in constant identifier.
It is used for example in C to allow declaring constants acting as function macros.
-->
<ConstIDSpecChars></ConstIDSpecChars>

<!--
Elements used in code generation will follow.
The only valid character to set indent level in elements responsible for code generation (e.g. FileContentsTemplate) is TAB. Whitespaces will not work.
In lines containing branch placeholders (e.g. %b1) all characters except for leading tabs are disregarded.
Template elements may contain many lines.
-->

<WhileTemplate>while %s1 execute
BEGIN
	%b1
END;
</WhileTemplate>

<IfTemplate>if %s1 execute
BEGIN
	%b1
END;
</IfTemplate>

<IfElseTemplate>if %s1 execute
BEGIN
	%b1
END;
else
BEGIN
	%b2
END;
</IfElseTemplate>

<RepeatUntilTemplate>repeat execute
BEGIN
	%b1
END;
until %s1;
</RepeatUntilTemplate>

<!--
Element RepeatUntilAsDoWhile
False - break loop when condition is true (default, Pascal like)
True - continue loop when condition is true (C like)
Used to switch default repeat..until loop behaviour to work as do..while in C
-->
<RepeatUntilAsDoWhile>false</RepeatUntilAsDoWhile>

<!--
Element ForDoVarList
Determines whether control variable in for..do block should be selected from dropdown list (true) or user is free to enter anything (false)
-->
<ForDoVarList>true</ForDoVarList>

<!--
Element ForDoVarString
String that will be displayed between control variable and initial value
-->
<ForDoVarString>=</ForDoVarString>

<!--
Element ForDoTemplate
Available placeholders:
   %s1 - control variable
   %s2 - start value
   %s3 - stop value
   %s4 - first "increasing or decreasing" modifier string (element ForDoTemplateModifier1)
   %s5 - second "increasing or decreasing" modifier string (element ForDoTemplateModifier2)  
-->
<ForDoTemplate>for (%s1 = %s2; %s1 %s4 %s3; %s1%s5)
BEGIN
	%b1
END;
</ForDoTemplate>

<!--
Element ForDoTemplateModifier1
Description: It returns value based on whether for..do block is increasing|decreasing
It returns value "<=" if block is increasing or ">=" if decreasing 
-->
<ForDoTemplateModifier1>&lt;=|&gt;=</ForDoTemplateModifier1>

<!--
Element ForDoTemplateModifier2
Description: It returns value based on whether for..do block is increasing|decreasing
It returns value "++" if block is increasing or "--" if decreasing
-->
<ForDoTemplateModifier2>++|--</ForDoTemplateModifier2>

<!--
Element CaseOfValueTemplate
Available placeholders:
   %s1 - value
   %s2 - expression to evaluate value from
   %b1 - body for given value section
Used in elements: CaseOfTemplate   
-->
<CaseOfValueTemplate>%s1:
BEGIN
	%b1
	break;
END;
</CaseOfValueTemplate>

<!--
Element CaseOfFirstValueTemplate
This element should ONLY be used when language does not support switch/case statement
and you want to replace it by sequence of "if..else if" statements. Otherwise this tag should be empty or not present.
Available placeholders are the same as for CaseOfValueTemplate element.   
-->
<CaseOfFirstValueTemplate></CaseOfFirstValueTemplate>

<!--
Element CaseOfDefaultValueTemplate
Available placeholders:
   %b1 - body for case default section
Used in elements: CaseOfTemplate   
-->
<CaseOfDefaultValueTemplate>	else
	BEGIN
		%b1
	END;
</CaseOfDefaultValueTemplate>

<!--
Element CaseOfTemplate
Available placeholders:
   %s1 - case of value
   %s2 - list of sections for specific values (list of CaseOfValueTemplate elements)
   %s3 - section for default value (CaseOfDefaultValueTemplate element)  
-->
<CaseOfTemplate>case %s1 of
	%s2
%s3
END;
</CaseOfTemplate>

<ReturnTemplate>exit %s1;</ReturnTemplate>

<FunctionCallTemplate>call %s1;</FunctionCallTemplate>

<InstrTemplate>%s1;</InstrTemplate>

<InputTemplate>%s1;</InputTemplate>

<OutputTemplate>%s1;</OutputTemplate>

<TextTemplate>/* %s1 */</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<!--
Element FileContentsTemplate
Description: Template to define source file layout
Available placeholders:
   %s1 - project name
   %s2 - program header section (element ProgramHeaderTemplate)
   %s3 - libraries section (element LibTemplate)
   %s4 - global constants section (element ConstTemplate)
   %s5 - global variables section (element VarTemplate)
   %s6 - user datatypes section (element DataTypesTemplate)
   %s7 - user functions section (element FunctionsTemplate)
   %s8 - main function (element MainFunctionTemplate)
-->
<FileContentsTemplate>%s2

%s3

%s4

%s6

%s5

%s7

%s8
</FileContentsTemplate>


<!--
Element ProgramHeaderTemplate
Available placeholders:
   %s1 - project name
   %s2 - language name
   %s3 - text from comment marked as Program Header
   %s4 - code generation timestamp
   %s5 - language definition file name used for code generation
   %s6 - full path of language definition file used for code generation
-->
<ProgramHeaderTemplate>/*
	%s2 program generated by devFlowcharter
	for %s1 project

	%s3
*/

</ProgramHeaderTemplate>

<!--
Element FunctionHeaderArgsEntryMask
Available placeholders:
   %s1 - argument name
   %s2 - argument type
   %s3 - used if argument is passed by reference (element FunctionHeaderArgsEntryRef)
   %s4 - used if argument is an array (element FunctionHeaderArgsEntryArray)
   %s5 - used if argument is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if argument is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - expression for argument default value (element FunctionHeaderArgsEntryDefault)
-->
<FunctionHeaderArgsEntryMask>%s3%s1: %s4%s2%s7, </FunctionHeaderArgsEntryMask>
<FunctionHeaderArgsEntryRef>ref </FunctionHeaderArgsEntryRef>
<FunctionHeaderArgsEntryArray>array of </FunctionHeaderArgsEntryArray>
<FunctionHeaderArgsEntryRecord>record </FunctionHeaderArgsEntryRecord>
<FunctionHeaderArgsEntryEnum>enum </FunctionHeaderArgsEntryEnum>

<!--
Element FunctionHeaderArgsEntryDefault
Description: Template for function parameter default value
Available placeholders:
   %s - default value
-->
<FunctionHeaderArgsEntryDefault> = %s</FunctionHeaderArgsEntryDefault>

<!--
Element FunctionHeaderArgsStripCount
Description: It contains number of chars to strip from end of argument list (element FunctionHeaderArgsEntryMask).
In given example ending to be stripped is ", " 
-->
<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<!--
Element FunctionHeaderTemplate
Description: Template for function header
Available placeholders:
   %s1 - name of the function
   %s2 - description/prefix of the function (element FunctionHeaderDescTemplate)
   %s3 - list of function parameters (list of FunctionHeaderArgsEntryMask elements)
   %s4 - return type
   %s5 - first string that depends if return type is none or specific (element FunctionHeaderTypeModifier1) 
   %s6 - second string that depends if return type is none or specific (element FunctionHeaderTypeModifier2)
   %s7 - string that depends if function is external or not (element FunctionHeaderExternalModifier); see also description for element ExternalLabel 
   %s8 - string that depends if function return type is array or not (element FunctionHeaderTypeArrayModifier)
   %s9 - string that depends if function is of static context (element FunctionHeaderStaticModifier); see also description for element StaticLabel     
-->
<FunctionHeaderTemplate>%s2
%s7%s5 %s1(%s3)%s6 %s4%s8;
</FunctionHeaderTemplate>

<!--
Element ConstructorHeaderTemplate
Description: Template for constructor header; it is used when constructor checkbox is checked
Available placeholders are the same as for element FunctionHeaderTemplate.    
-->
<ConstructorHeaderTemplate>%s2
constructor %s7%s5 %s1(%s3)%s6 %s4%s8;
</ConstructorHeaderTemplate>

<!--
Element FunctionHeaderTypeModifier1 and FunctionHeaderTypeModifier2
Description: Returns value based on whether function returns nothing|specific type
In given example, it returns value "procedure" if function type is none or "function" otherwise
-->
<FunctionHeaderTypeModifier1>procedure|function</FunctionHeaderTypeModifier1>
<FunctionHeaderTypeModifier2>|:</FunctionHeaderTypeModifier2>

<!--
Element FunctionHeaderStaticModifier
Description: Returns value based on whether function is static|not static
In given example, it returns value "static" if function is static or an empty string otherwise
-->
<FunctionHeaderStaticModifier>static|</FunctionHeaderStaticModifier>

<!--
Element FunctionHeaderExternalModifier
Description: Returns value based on whether or not function is declared as external|non-external|trans-external
In given example, it returns value "external " if function is external or "internal " if is not external; trans-external state is omitted
Note that trans-external state is available only if AllowTransExternFunction is set to true
-->
<FunctionHeaderExternalModifier>external |internal </FunctionHeaderExternalModifier>

<!--
Element FunctionHeaderTypeArrayModifier
Description: Returns value based on whether function return type is array|not array
In given example, it returns value "[]" if function return type is array or an empty string otherwise
-->
<FunctionHeaderTypeArrayModifier>[]|</FunctionHeaderTypeArrayModifier>

<!--
Element FunctionHeaderDescTemplate
Description: Template for generated description/prefix of function header
Available placeholders:
   %s1 - name of the function
   %s2 - return type of the function
   %s3 - list of function parameters (list of FunctionHeaderDescParmMask elements); lines containing this placeholder will be deleted if there are no parameters
   %s4 - expression for return type of the function (element FunctionHeaderDescReturnMask); lines containing this placeholder will be deleted if function returns nothing or is constructor
-->
<FunctionHeaderDescTemplate>/*
Function %s1 returning %s2
%s3 
*/</FunctionHeaderDescTemplate>

<!--
Element FunctionHeaderDescParmMask
Description: Mask for function parameter (used in FunctionHeaderDescTemplate element)  
Available placeholders:
   %s1 - name of the parameter
   %s2 - type of the parameter
   %s3 - default value of the parameter
   %s4 - index of the parameter (1-based)
-->
<FunctionHeaderDescParmMask>Parameter %s4: %s1: %s2 </FunctionHeaderDescParmMask>

<!--
Element FunctionHeaderDescReturnMask
Description: Mask for function return type (used in FunctionHeaderDescTemplate element)  
Available placeholders:
   %s1 - return type of the function
-->
<FunctionHeaderDescReturnMask></FunctionHeaderDescReturnMask>

<!--
Element FunctionBodyTemplate
Description: Template for function body
Available placeholders:
   %s1 - function name
   %s2 - function local variables (element VarTemplate)
   %b1 - body of function  
-->
<FunctionBodyTemplate>BEGIN
	%b1
END %s1;
</FunctionBodyTemplate>

<!--
Element FunctionTemplate
Description: Template for function (header + body)
Available placeholders:
   %s1 - function's header line (element FunctionHeaderTemplate or ConstructorHeaderTemplate)
   %s2 - function's local variables (element VarTemplate)
   %s3 - function's body (element FunctionBodyTemplate)  
-->
<FunctionTemplate>%s1
%s2
%s3

</FunctionTemplate>

<!--
Element FunctionsTemplate
Description: Template for user functions section
Available placeholders:
   %s1 - list of function declarations (list of FunctionTemplate elements)  
-->
<FunctionsTemplate>%s1</FunctionsTemplate>

<!--
Element MainFunctionTemplate
Description: Template for main program body
Available placeholders:
   %s1 - project name
   %s2 - global variables (element VarTemplate)
   %s3 - return statement which is generated if last statement of program isn't return block (element ProgramReturnTemplate)
   %b1 - main function body
-->
<MainFunctionTemplate>BEGIN
	%b1
	%s3
END %s1;
</MainFunctionTemplate>

<ProgramReturnTemplate>/* Program ends with no value returned. */</ProgramReturnTemplate>

<!--
Element VarExternModifier
Description: Variable declaration modifier depending if variable is external|not external|trans-external.
Trans-external state is enabled only if AllowTransExternVarConst is set to true.
In given example, it returns "extern " if variable is external, empty string if not external and "trans extern " if trans-external.
-->
<VarExternModifier>extern ||trans extern </VarExternModifier>

<!--
Element VarEntry
Description: Entry for single variable (non-array) declaration
Available placeholders:
   %s1 - variable name
   %s2 - variable type
   %s4 - variable initial value (element VarEntryInit or VarEntryInitExtern) 
   %s5 - used if variable is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if variable is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - string depending if variable is external (element VarExternModifier)
-->
<VarEntry>%s7%s5%s6%s2 %s1%s4;</VarEntry>

<!--
Element VarEntryArray
Description: Entry for single array variable declaration
Available placeholders are the same as for VarEntry element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<VarEntryArray>%s7%s5%s6%s2 %s1%s3%s4;</VarEntryArray>

<!--
Element VarEntryArraySize
Description: Entry for array's single dimension
   %s - size of array dimension
-->
<VarEntryArraySize>[%s]</VarEntryArraySize>

<!--
Element VarEntryArraySizeStripCount
Description: Number of chars to strip from end of array size declaration (VarEntryArraySize) 
-->
<VarEntryArraySizeStripCount>0</VarEntryArraySizeStripCount>

<!--
Element VarEntryInit
Description: Mask for not external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInit> = %s1</VarEntryInit>

<!--
Element VarEntryInitExtern
Description: Mask for external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInitExtern> = %s1</VarEntryInitExtern>

<!--
Element VarTemplate
Description: Template for section to declare variables
Available placeholders:
   %s1 - list of variables (VarEntry or VarEntryArray elements) 
-->
<VarTemplate>vars
	%s1
</VarTemplate>

<!--
Element ConstTemplate
Description: Template for section to declare constants
Available placeholders:
   %s1 - list of constants (list of ConstEntry elements) 
-->
<ConstTemplate>consts
	%s1
</ConstTemplate>

<!--
Element ConstExternModifier
Description: Constant declaration modifier depending if constant is external|not external|trans-external
Trans-external state is enabled only if AllowTransExternVarConst is set to true.
In given example, it returns "extern " if constant is external, empty string if not external and "trans " if trans-external.
-->
<ConstExternModifier>extern ||trans </ConstExternModifier>

<!--
Element ConstEntry
Description: Entry for single declaration of constant
Available placeholders:
   %s1 - constant name
   %s2 - constant value
   %s3 - string depending if constant is external (element ConstExternModifier)
   %s4 - constant type expression (element ConstTypeModifier)
-->
<ConstEntry>%s3define %s1 = %s2;</ConstEntry>

<!--
Element ConstEntryArray
Description: Entry for single constant array declaration
Available placeholders are the same as for ConstEntry element and:
   %s5 - list of array sizes (VarEntryArraySize element)
-->
<ConstEntryArray></ConstEntryArray>

<!--
Element ConstTypeModifier
Description:
Constant type expression depending if evaluated contstant type is not generic|generic
Available placeholders:
   %s1 - main type
   %s2 - generic types string (used when main type is a generic type)   
-->
<ConstTypeModifier>%s1|%s1&lt;%s2&gt;</ConstTypeModifier>

<!--
Element LibTemplate
Description: Template for section containing libraries
Available placeholders:
   %s1 - list of libraries as separated entries (list of LibEntry elements) 
   %s2 - list of libraries as single list (element LibEntryList)
Notice: %s1 and %s2 placeholders should be used interchangeably
-->
<LibTemplate>libraries
	%s1

</LibTemplate>
<LibEntry>include %s;</LibEntry>
<!--<LibEntryList>%s, </LibEntryList>-->

<!--
Element LibEntryListStripCount
Description: Number of chars to strip from end of library list (element LibEntryList) 
-->
<LibEntryListStripCount>2</LibEntryListStripCount>

<!--
Element PointerTypeMask
Description: Mask to create pointer type based on given type
Available placeholders:
   %s - base type
-->
<PointerTypeMask>%s*</PointerTypeMask>

<!--
Element DataTypesTemplate
Description: Template for data types section
Available placeholders:
   %s1 - list of data type declarations  
-->
<DataTypesTemplate>type
	%s1

</DataTypesTemplate>

<!--
Element DataTypeExternalModifier
Description: It returns value based on whether datatype is declared as external|not external|trans-external.
Trans-external state is enabled only if AllowTransExternDataType is set to true.
In given example, it returns value "external " if datatype is external or "internal " if not; trans-external state is omitted
-->
<DataTypeExternalModifier>external |internal </DataTypeExternalModifier>

<!--
Element DataTypeIntMask
Description: Template for integer number types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - data type name
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier) 
-->
<DataTypeIntMask>%s1 = integer;</DataTypeIntMask>

<!--
Element DataTypeRealMask
Description: Template for real number types.
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)    
-->
<DataTypeRealMask>%s1 = real;</DataTypeRealMask>

<!--
Element DataTypeOtherMask
Description: Template for other types.
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name
   %s2 - base type
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)
-->
<DataTypeOtherMask>%s1 = %s2;</DataTypeOtherMask>

<!--
Element DataTypeArrayMask
Description: Template for array type.
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - array type name
   %s2 - base array type
   %s3 - array type size
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)   
-->
<DataTypeArrayMask>%s1 = %s2%s3;</DataTypeArrayMask>

<!--
Element DataTypeUnboundedArrayMask
Description: Template for unbounded (no size) array type.
If unbounded array expression can be generated with DataTypeArrayMask element, this one should be empty or removed.
This element is only effective if unbounded arrays are allowed by language (element AllowUnboundedArrays).
Available placeholders:
   %s1 - array type name
   %s2 - base array type
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)   
-->
<DataTypeUnboundedArrayMask></DataTypeUnboundedArrayMask>

<!--
Element DataTypeRecordTemplate
Description: Template for record type; see also description for RecordLabel element
Available placeholders:
   %s1 - record name 
   %s2 - list of fields (DataTypeRecordFieldMask or DataTypeRecordFieldArrayMask elements)
   %s9 - string that depends if datatype is external or not (element DataTypeExternalModifier)
-->
<DataTypeRecordTemplate>%s1 = record
BEGIN
	%s2
END;

</DataTypeRecordTemplate>

<!--
Element DataTypeRecordFieldMask
Description: Entry for single field (non-array) of record
Available placeholders:
   %s1 - field name
   %s2 - field type
   %s4 - used if field is a record (element FunctionHeaderArgsEntryRecord)
   %s5 - used if field is an enumeration (element FunctionHeaderArgsEntryEnum)
-->
<DataTypeRecordFieldMask>%s4%s5%s2 %s1;</DataTypeRecordFieldMask>

<!--
Element DataTypeRecordFieldArrayMask
Description: Entry for single field (array) of record
Available placeholders are the same as for DataTypeRecordFieldMask element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<DataTypeRecordFieldArrayMask>%s4%s5%s2 %s1%s3;</DataTypeRecordFieldArrayMask>

<!--
Element DataTypeEnumTemplate
Description: Template for enumeration type
Available placeholders:
   %s1 - enumeration name 
   %s2 - list of values (list of DataTypeEnumEntryList elements)
-->
<DataTypeEnumTemplate>%s1 = (%s2);</DataTypeEnumTemplate>

<!--
Element DataTypeEnumEntryList
Description: Mask for list of enumerated values
Available placeholders:
   %s - enumerated value
-->
<DataTypeEnumEntryList>%s, </DataTypeEnumEntryList>

<!--
Element DataTypeEnumEntryListStripCount
Description: It contains number of chars to strip from end of enumeration values list (element DataTypeEnumEntryList).
In given example ending to be stripped is ", " 
-->
<DataTypeEnumEntryListStripCount>2</DataTypeEnumEntryListStripCount>

<!--
Element UserTypeDesc
Description: Mask for user datatype description
Available placeholders:
   %s1 - type name
   %s2 - type kind
-->
<UserTypeDesc>%s2 %s1</UserTypeDesc>

<!--
Element ExternalLabel
Used to change default label displayed for external variable/constant or function/datatype; it's not translated
-->
<ExternalLabel></ExternalLabel>

<!--
Element StaticLabel
Used to change default label displayed for static functions; it's not translated
-->
<StaticLabel></StaticLabel>

<!--
Element RecordLabel
Used to change default label displayed for record data type; it's not translated
-->
<RecordLabel></RecordLabel>

<!--
Element GlobalVarsLabelKey
Description: Label displayed for global variables.
It should contain name of key present in translation file (.lng) in Others section.
-->
<GlobalVarsLabelKey>GlobalVars</GlobalVarsLabelKey>

<!--
Element GlobalConstsLabelKey
Description: Label displayed for global constants.
It should contain name of key present in translation file (.lng) in Others section.
-->
<GlobalConstsLabelKey>GlobalConsts</GlobalConstsLabelKey>

</Language>
