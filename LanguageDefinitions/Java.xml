<?xml version="1.0" encoding="UTF-8"?>

<Language>
    <Name>Java</Name>
    <CommentBegin>/*</CommentBegin>			<!-- if language supports only single-line comments then CommentBegin tag -->
    <CommentEnd>*/</CommentEnd>				<!-- should contain comment symbol and CommentEnd tag should be empty or removed -->
    <InputFunction>in()</InputFunction>
    <OutputFunction>System.out.println()</OutputFunction>
    <DefaultExt>java</DefaultExt>
    <LibraryExt>.jar</LibraryExt>
    <AssignOperator>=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>
    <DecimalSeparator>.</DecimalSeparator>
    <InstrEnd>;</InstrEnd>
    <InOutCursorPos>-1</InOutCursorPos>			<!-- counted from end -->
    <FuncBracketsCursorPos>-1</FuncBracketsCursorPos>	<!-- counted from end -->

    <EnabledConsts>true</EnabledConsts>			<!-- false or 0 is false, true or not 0 is true -->				
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledUserDataTypes>true</EnabledUserDataTypes>
    <EnabledPointers>true</EnabledPointers>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <CaseSensitiveSyntax>false</CaseSensitiveSyntax>
    <UpperCaseConstId>true</UpperCaseConstId>
    <AllowEnumsInForLoop>true</AllowEnumsInForLoop>
    <AllowUserFunctionOverload>true</AllowUserFunctionOverload>
    <AllowUnboundedArrays>false</AllowUnboundedArrays>
    <GenExternVarConst>false</GenExternVarConst>

    <FoldRegions>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtChar" WholeWords="true">
            <Open Keyword="{"/>
            <Close Keyword="}"/>
        </FoldRegion>
        <FoldRegion AddClose="true" NoSubFolds="true" Type="rtKeyword" WholeWords="true">
            <Open Keyword="/*"/>
            <Close Keyword="*/"/>
        </FoldRegion>
    </FoldRegions>

    <NativeDataTypes>
        <DataType kind="int">int</DataType>
        <DataType kind="int">char</DataType>
        <DataType kind="int">byte</DataType>
	<DataType kind="int">short</DataType>
        <DataType kind="int">long</DataType>
	<DataType kind="real">float</DataType>
	<DataType kind="real">double</DataType>
	<DataType kind="bool">boolean</DataType>
	<DataType kind="string">String</DataType>
	<DataType kind="other">StringBuilder</DataType>
	<DataType kind="other" generic="true">List</DataType>
	<DataType kind="other" generic="true">Map</DataType>
	<DataType kind="other" generic="true">Set</DataType>
	<DataType kind="other" generic="true">Queue</DataType>
	<DataType kind="other">Character</DataType>
	<DataType kind="other">Byte</DataType>
	<DataType kind="other">Short</DataType>
	<DataType kind="other">Integer</DataType>
	<DataType kind="other">Long</DataType>
	<DataType kind="other">Float</DataType>
	<DataType kind="other">Double</DataType>
	<DataType kind="other">Boolean</DataType>
	<DataType kind="other">BigDecimal</DataType>
	<DataType kind="other">DateFormat</DataType>
	<DataType kind="other">Date</DataType>
	<DataType kind="other">Calendar</DataType>
	<DataType kind="other">LocalDate</DataType>
	<DataType kind="other">LocalDateTime</DataType>
	<DataType kind="other">LocalTime</DataType>
	<DataType kind="other">Random</DataType>
	<DataType kind="other">File</DataType>
	<DataType kind="other">Writer</DataType>
	<DataType kind="other">Reader</DataType>
	<DataType kind="other">InputStream</DataType>
	<DataType kind="other">OutputStream</DataType>
    </NativeDataTypes>

    <KeyWords>
        <KeyWord>abstract</KeyWord>
        <KeyWord>assert</KeyWord>
        <KeyWord>boolean</KeyWord>
        <KeyWord>break</KeyWord>
        <KeyWord>byte</KeyWord>
        <KeyWord>case</KeyWord>
        <KeyWord>catch</KeyWord>
        <KeyWord>char</KeyWord>
        <KeyWord>class</KeyWord>
        <KeyWord>const</KeyWord>
        <KeyWord>continue</KeyWord>
        <KeyWord>default</KeyWord>
        <KeyWord>do</KeyWord>
        <KeyWord>double</KeyWord>
        <KeyWord>else</KeyWord>
        <KeyWord>enum</KeyWord>
        <KeyWord>extends</KeyWord>
        <KeyWord>final</KeyWord>
        <KeyWord>finally</KeyWord>
        <KeyWord>float</KeyWord>
        <KeyWord>for</KeyWord>
        <KeyWord>goto</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>implements</KeyWord>
        <KeyWord>import</KeyWord>
        <KeyWord>instanceof</KeyWord>
        <KeyWord>int</KeyWord>
        <KeyWord>interface</KeyWord>
        <KeyWord>long</KeyWord>
        <KeyWord>native</KeyWord>
        <KeyWord>new</KeyWord>
        <KeyWord>package</KeyWord>
        <KeyWord>private</KeyWord>
        <KeyWord>protected</KeyWord>
        <KeyWord>public</KeyWord>
        <KeyWord>return</KeyWord>
        <KeyWord>short</KeyWord>
        <KeyWord>static</KeyWord>
        <KeyWord>strictfp</KeyWord>
        <KeyWord>super</KeyWord>
        <KeyWord>switch</KeyWord>
        <KeyWord>synchronized</KeyWord>
        <KeyWord>this</KeyWord>
        <KeyWord>throw</KeyWord>
        <KeyWord>throws</KeyWord>
        <KeyWord>transient</KeyWord>
        <KeyWord>try</KeyWord>
        <KeyWord>void</KeyWord>
        <KeyWord>volatile</KeyWord>
        <KeyWord>while</KeyWord>
    </KeyWords>

<!--
Element ProcedureLabelKey
Description: Label displayed close to flowchart for body of function that does not return specific data type.
It should contain name of key (free to be added) present in translation file (.lng) in Others section
-->
<ProcedureLabelKey>ProcedureLabelExample</ProcedureLabelKey>

<!--
Element FunctionLabelKey
Description: Label displayed close to flowchart for body of function that returns specific data type
-->
<FunctionLabelKey>FunctionLabelExample</FunctionLabelKey>

<!--
Element ProgramLabelKey
Description: Label displayed close to flowchart for body of project's main program
-->
<ProgramLabelKey>ProgramLabelExample</ProgramLabelKey>

<!--
Block label elements will follow.
Will be displayed in flowchart for given blocks.
-->
<LabelWhile>while</LabelWhile>
<LabelRepeat>repeat until</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>Case</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>func call</LabelFuncCall>
<LabelReturn>return</LabelReturn>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<ElseLabel>else</ElseLabel>

<!--
Element RepeatUntilDescTemplate
DescTemplate elements are used in Explorer window to display description of some troublesome blocks when it's impossible to extract proper description from block template.
Procedure for building description for flowchart elements in Explorer window is as follows:
	1. Use value proper DescTemplate element if it exists and is not empty, otherwise
	2. Use value from expression extracted from block template (e.g. from ForDoTemplate element); if such element does not exist or no expression placeholder (%s1) is found then
	3. Use value returned by hardcoded Delphi procedure 
Available placeholder:
   %s1 - condition expression 
-->
<RepeatUntilDescTemplate>repeat until %s1</RepeatUntilDescTemplate>

<!--
Element ReturnDescTemplate
Available placeholder:
   %s1 - return expression
-->
<!-- 
<ReturnDescTemplate>return %s1</ReturnDescTemplate>
-->

<!--
Element ForDoDescTemplate
Available placeholders:
   %s1 - control variable
   %s2 - begin value
   %s3 - end value
-->
<!-- 
<ForDoDescTemplate>for %s1 = %s2 to %s2</ForDoDescTemplate>
-->

<!--
Element CaseOfDescTemplate
Available placeholder:
   %s1 - case expression
-->
<!-- 
<CaseOfDescTemplate>case %s1 of</CaseOfDescTemplate>
-->

<HighLighterVarName>SynJavaSyn1</HighLighterVarName>

<!--
Element ConstIDSpecChars
Character string containing special characters that are valid in constant identifier.
It is used for example in C to allow declaring constants acting as function macros.
-->
<ConstIDSpecChars></ConstIDSpecChars>

<!--
Elements used in code generation will follow.
The only valid character that is used to set indent level is tab. Whitespace chars will not work.
In lines containing branch indicators (e.g. %b1) all characters except for leading tabs are disregarded.
Template elements are intended to have many lines.
-->

<WhileTemplate>while %s1 execute
BEGIN
	%b1
END;
</WhileTemplate>

<IfTemplate>if %s1 execute
BEGIN
	%b1
END;
</IfTemplate>

<IfElseTemplate>if %s1 execute
BEGIN
	%b1
END;
else
BEGIN
	%b2
END;
</IfElseTemplate>

<RepeatUntilTemplate>repeat execute
BEGIN
	%b1
END;
until %s1;
</RepeatUntilTemplate>

<!--
Element RepeatUntilAsDoWhile
False - break loop when condition is true (default, Pascal like)
True - continue loop when condition is true (C like)
Used to switch default repeat..until loop behaviour to work as do..while in C
-->
<RepeatUntilAsDoWhile>false</RepeatUntilAsDoWhile>

<!--
Element ForDoVarList
Determines whether control variable in ForDo block should be selected from dropdown list (true) 
or user is free to enter anything (false)
-->
<ForDoVarList>true</ForDoVarList>

<!--
Element ForDoVarString
String that will be displayed between control variable and initial value
-->
<ForDoVarString>=</ForDoVarString>

<!--
Element ForDoTemplate
Available placeholders:
   %s1 - control variable
   %s2 - start value
   %s3 - stop value
   %s4 - first direction (ascending/descending) dependent string (ForAsc1 or ForDesc1 element)
   %s5 - second direction (ascending/descending) dependent string (ForAsc2 or ForDesc2 element)  
-->
<ForDoTemplate>for (%s1 = %s2; %s1 %s4 %s3; %s1%s5)
BEGIN
	%b1
END;
</ForDoTemplate>
<ForAsc1>&lt;=</ForAsc1>
<ForAsc2>++</ForAsc2>
<ForDesc1>&gt;=</ForDesc1>
<ForDesc2>--</ForDesc2>

<!--
Element CaseOfValueTemplate
Available placeholders:
   %s1 - given value
   %b1 - body for given value section
Used in elements: CaseOfTemplate   
-->
<CaseOfValueTemplate>%s1:
BEGIN
	%b1
	break;
END;
</CaseOfValueTemplate>

<!--
Element CaseOfDefaultValueTemplate
Available placeholders:
   %b1 - body for case default section
Used in elements: CaseOfTemplate   
-->
<CaseOfDefaultValueTemplate>	else
	BEGIN
		%b1
	END;
</CaseOfDefaultValueTemplate>

<!--
Element CaseOfTemplate
Available placeholders:
   %s1 - case of value
   %s2 - list of sections for specific values (list of CaseOfValueTemplate elements)
   %s3 - section for default value (CaseOfDefaultValueTemplate element)  
-->
<CaseOfTemplate>case %s1 of
	%s2
%s3
END;
</CaseOfTemplate>

<ReturnTemplate>exit %s1;</ReturnTemplate>

<FunctionCallTemplate>call %s1;</FunctionCallTemplate>

<InstrTemplate>%s1;</InstrTemplate>

<InputTemplate>%s1;</InputTemplate>

<OutputTemplate>%s1;</OutputTemplate>

<TextTemplate>/* %s1 */</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<!--
Element ProgramHeaderTemplate
Available placeholders:
   %s1 - project name
   %s2 - language name
   %s3 - text from comment marked as Program Header
   %s4 - code generation timestamp
   %s5 - language definition file used for code generation
-->
<ProgramHeaderTemplate>/*
	%s2 program generated by devFlowcharter
	for %s1 project	
*/
%s3

</ProgramHeaderTemplate>

<!--
Element FunctionHeaderArgsEntryMask
Available placeholders:
   %s1 - argument name
   %s2 - argument type
   %s3 - used if argument is passed by reference (element FunctionHeaderArgsEntryRef)
   %s4 - used if argument is an array (element FunctionHeaderArgsEntryArray)
   %s5 - used if argument is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if argument is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - expression for argument default value (element FunctionHeaderArgsEntryDefault)
-->
<FunctionHeaderArgsEntryMask>%s3%s1: %s4%s2%s7, </FunctionHeaderArgsEntryMask>
<FunctionHeaderArgsEntryRef>ref </FunctionHeaderArgsEntryRef>
<FunctionHeaderArgsEntryArray>array of </FunctionHeaderArgsEntryArray>
<FunctionHeaderArgsEntryRecord>record </FunctionHeaderArgsEntryRecord>
<FunctionHeaderArgsEntryEnum>enum </FunctionHeaderArgsEntryEnum>

<!--
Element FunctionHeaderArgsEntryDefault
Description: Template for function parameter default value
Available placeholders:
   %s - default value
-->
<FunctionHeaderArgsEntryDefault> = %s</FunctionHeaderArgsEntryDefault>

<!--
Element FunctionHeaderArgsStripCount
Description: It contains number of chars to strip from end of argument list (element FunctionHeaderArgsEntryMask).
In given example ending to be stripped is ", " 
-->
<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<!--
Element FunctionHeaderTemplate
Description: Template for function header
Available placeholders:
   %s1 - name of the function
   %s2 - description/prefix of the function
   %s3 - list of function parameters (list of FunctionHeaderArgsEntryMask elements)
   %s4 - return type
   %s5 - first string that depends on return type (none or specific) - FunctionHeaderTypeNone1 or FunctionHeaderTypeNotNone1 element 
   %s6 - second string that depends on return type (none or specific) - FunctionHeaderTypeNone2 or FunctionHeaderTypeNotNone2 element
-->
<FunctionHeaderTemplate>%s2
%s5 %s1(%s3)%s6 %s4;
</FunctionHeaderTemplate>
<FunctionHeaderTypeNone1>procedure</FunctionHeaderTypeNone1>
<FunctionHeaderTypeNotNone1>function</FunctionHeaderTypeNotNone1>
<FunctionHeaderTypeNone2></FunctionHeaderTypeNone2>
<FunctionHeaderTypeNotNone2>:</FunctionHeaderTypeNotNone2>

<!--
Element ProgramTemplate
Description: Template for function body
Available placeholders:
   %s1 - function name
   %s2 - function local variables (element VarTemplate)
   %b1 - body of function  
-->
<ProgramTemplate>BEGIN
	%b1
END %s1;
</ProgramTemplate>

<!--
Element FunctionTemplate
Description: Template for function (header + body)
Available placeholders:
   %s1 - function's header line (element FunctionHeaderTemplate)
   %s2 - function's local variables (element VarTemplate)
   %s3 - function's body (element ProgramTemplate)  
-->
<FunctionTemplate>%s1
%s2
%s3

</FunctionTemplate>

<!--
Element FunctionsTemplate
Description: Template for user functions section
Available placeholders:
   %s1 - list of function declarations (list of FunctionTemplate elements)  
-->
<FunctionsTemplate>%s1</FunctionsTemplate>

<!--
Element MainProgramTemplate
Description: Template for main program body
Available placeholders:
   %s1 - project name
   %s2 - global variables (element VarTemplate)
   %s3 - return statement which is generated if last statement of program isn't return block (element ProgramReturnTemplate)
   %b1 - body of main program  
-->
<MainProgramTemplate>BEGIN
	%b1
	%s3
END %s1;
</MainProgramTemplate>

<ProgramReturnTemplate>/* Program ends with no value returned. */</ProgramReturnTemplate>

<!--
Element ExternEntry
Description: Declaration modifier for external variables
-->
<ExternEntry>extern </ExternEntry>

<!--
Element VarEntry
Description: Entry for single variable (non-array) declaration
Available placeholders:
   %s1 - variable name
   %s2 - variable type
   %s4 - variable initial value (element VarEntryInit or VarEntryInitExtern) 
   %s5 - used if variable is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if variable is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - used if variable is marked as external and GenExternVarConst element is true (element ExternEntry)
-->
<VarEntry>%s7%s5%s6%s2 %s1%s4;</VarEntry>

<!--
Element VarEntryArray
Description: Entry for single array variable declaration
Available placeholders are the same as for VarEntry element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<VarEntryArray>%s7%s5%s6%s2 %s1%s3%s4;</VarEntryArray>

<!--
Element VarEntryArraySize
Description: Entry for array's single dimension
   %s - size of array dimension
-->
<VarEntryArraySize>[%s]</VarEntryArraySize>

<!--
Element VarEntryArraySizeStripCount
Description: Number of chars to strip from end of array size declaration (VarEntryArraySize) 
-->
<VarEntryArraySizeStripCount>0</VarEntryArraySizeStripCount>

<!--
Element VarEntryInit
Description: Mask for not external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInit> = %s1</VarEntryInit>

<!--
Element VarEntryInitExtern
Description: Mask for external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInitExtern> = %s1</VarEntryInitExtern>

<!--
Element VarTemplate
Description: Template for section to declare variables
Available placeholders:
   %s1 - list of variables (VarEntry or VarEntryArray elements) 
-->
<VarTemplate>vars
	%s1
</VarTemplate>

<!--
Element ConstTemplate
Description: Template for section to declare constants
Available placeholders:
   %s1 - list of constants (ConstEntry or ConstEntryExtern elements) 
-->
<ConstTemplate>consts
	%s1
</ConstTemplate>

<!--
Element ConstEntry
Description: Entry for single declaration of not external constant
Available placeholders:
   %s1 - constant name
   %s2 - constant value
-->
<ConstEntry>define %s1 = %s2;</ConstEntry>

<!--
Element ConstEntryExtern
Description: Entry for single declaration of external constant. Applicable if GenExternVarConst is true.
Available placeholders:
   %s1 - constant name
   %s2 - constant value
-->
<ConstEntryExtern>define %s1 = %s2;</ConstEntryExtern>

<!--
Element LibTemplate
Description: Template for section containing libraries
Available placeholders:
   %s1 - list of libraries as separated entries (list of LibEntry elements) 
   %s2 - list of libraries as single list (element LibEntryList)
Notice: %s1 and %s2 placeholders should be used interchangeably
-->
<LibTemplate>libraries
	%s1

</LibTemplate>
<LibEntry>include %s;</LibEntry>
<LibEntryList>%s, </LibEntryList>

<!--
Element LibEntryListStripCount
Description: Number of chars to strip from end of library list (element LibEntryList) 
-->
<LibEntryListStripCount>2</LibEntryListStripCount>

<!--
Element PointerTypeMask
Description: Mask to create pointer type based on given type
Available placeholders:
   %s - base type
-->
<PointerTypeMask>%s*</PointerTypeMask>

<!--
Element DataTypesTemplate
Description: Template for data types section
Available placeholders:
   %s1 - list of data type declarations  
-->
<DataTypesTemplate>type
	%s1

</DataTypesTemplate>

<!--
Element DataTypeIntMask
Description: Template for integer number types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - data type name  
-->
<DataTypeIntMask>%s1 = integer;</DataTypeIntMask>

<!--
Element DataTypeRealMask
Description: Template for real number types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name  
-->
<DataTypeRealMask>%s1 = real;</DataTypeRealMask>

<!--
Element DataTypeOtherMask
Description: Template for other types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - type name
   %s2 - base type
-->
<DataTypeOtherMask>%s1 = %s2;</DataTypeOtherMask>

<!--
Element DataTypeArrayMask
Description: Template for other types
If there is no need to generate this kind of data types, it should be empty or removed.
Available placeholders:
   %s1 - array type name
   %s2 - base array type
   %s3 - array type size   
-->
<DataTypeArrayMask>%s1 = %s2%s3;</DataTypeArrayMask>

<!--
Element DataTypeRecordTemplate
Description: Template for record type
Available placeholders:
   %s1 - record name 
   %s2 - list of fields (DataTypeRecordFieldMask or DataTypeRecordFieldArrayMask elements)
-->
<DataTypeRecordTemplate>%s1 = record
BEGIN
	%s2
END;

</DataTypeRecordTemplate>

<!--
Element DataTypeRecordFieldMask
Description: Entry for single field (non-array) of record
Available placeholders:
   %s1 - field name
   %s2 - field type
   %s4 - used if field is a record (element FunctionHeaderArgsEntryRecord)
   %s5 - used if field is an enumeration (element FunctionHeaderArgsEntryEnum)
-->
<DataTypeRecordFieldMask>%s4%s5%s2 %s1;</DataTypeRecordFieldMask>

<!--
Element DataTypeRecordFieldArrayMask
Description: Entry for single field (array) of record
Available placeholders are the same as for DataTypeRecordFieldMask element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<DataTypeRecordFieldArrayMask>%s4%s5%s2 %s1%s3;</DataTypeRecordFieldArrayMask>

<!--
Element DataTypeEnumTemplate
Description: Template for enumeration type
Available placeholders:
   %s1 - enumeration name 
   %s2 - list of values (list of DataTypeEnumEntryList elements)
-->
<DataTypeEnumTemplate>%s1 = (%s2);</DataTypeEnumTemplate>

<!--
Element DataTypeEnumEntryList
Description: Mask for list of enumerated values
Available placeholders:
   %s - enumerated value
-->
<DataTypeEnumEntryList>%s, </DataTypeEnumEntryList>

<!--
Element DataTypeEnumEntryListStripCount
Description: It contains number of chars to strip from end of enumeration values list (element DataTypeEnumEntryList).
In given example ending to be stripped is ", " 
-->
<DataTypeEnumEntryListStripCount>2</DataTypeEnumEntryListStripCount>

<!--
Element UserTypeDesc
Description: Mask for user datatype description
Available placeholders:
   %s1 - type name
   %s2 - type kind
-->
<UserTypeDesc>%s2 %s1</UserTypeDesc>

</Language>