<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Java language definition file for devFlowcharter.
It may not contain all supported tags. For all supported tags and their descriptions go to file Example.xml
-->

<Language>
    <Name>Java</Name>
    <CommentBegin>/*</CommentBegin>			<!-- if language supports only single-line comments then CommentBegin tag -->
    <CommentEnd>*/</CommentEnd>				<!-- should contain comment symbol and CommentEnd tag should be empty or removed -->
    <InputFunction>System.in.read()</InputFunction>
    <OutputFunction>System.out.println()</OutputFunction>
    <InOutCursorPos>-1</InOutCursorPos>			<!-- cursor position for Input/OutputFunction; negative or zero: counted from end; positive: counted from beginning -->
    <DefaultExt>java</DefaultExt>
    <LibraryExt>.jar</LibraryExt>
    <AssignOperator>=</AssignOperator>
    <FuncBrackets>()</FuncBrackets>						<!-- brackets added to NativeFunctions -->
    <FuncBracketsCursorPos>1</FuncBracketsCursorPos>	<!-- cursor position for FuncBrackets; counted from beginning -->
    <DecimalSeparator>.</DecimalSeparator>
    <InstrEnd>;</InstrEnd>
	
    <EnabledConsts>true</EnabledConsts>	
    <EnabledVars>true</EnabledVars>
    <EnabledCompiler>true</EnabledCompiler>
    <EnabledUserFunctionHeader>true</EnabledUserFunctionHeader>
    <EnabledUserFunctionBody>true</EnabledUserFunctionBody>
    <EnabledUserDataTypes>true</EnabledUserDataTypes>
    <EnabledUserDataTypeInt>false</EnabledUserDataTypeInt>
    <EnabledUserDataTypeReal>false</EnabledUserDataTypeReal>
    <EnabledUserDataTypeOther>true</EnabledUserDataTypeOther>
    <EnabledUserDataTypeEnum>true</EnabledUserDataTypeEnum>
    <EnabledUserDataTypeArray>false</EnabledUserDataTypeArray>
    <EnabledPointers>false</EnabledPointers>
    <EnabledExplorer>true</EnabledExplorer>
    <EnabledCodeGenerator>true</EnabledCodeGenerator>
    <EnabledMainProgram>true</EnabledMainProgram>
    <CaseSensitiveSyntax>true</CaseSensitiveSyntax>
    <AllowEnumsInForLoop>false</AllowEnumsInForLoop>
    <AllowUserFunctionOverload>true</AllowUserFunctionOverload>
    <AllowUnboundedArrays>true</AllowUnboundedArrays>
    <AllowDuplicatedLibs>true</AllowDuplicatedLibs>
    <AllowTransExternVarConst>true</AllowTransExternVarConst>
    <AllowTransExternFunction>true</AllowTransExternFunction>
    <AllowTransExternDataType>false</AllowTransExternDataType>
    <CodeIncludeExternDataType>true</CodeIncludeExternDataType>
    <CodeIncludeExternFunction>true</CodeIncludeExternFunction>
    <CodeIncludeExternVarConst>true</CodeIncludeExternVarConst>

    <FoldRegions>
        <FoldRegion AddClose="false" NoSubFolds="false" Type="rtChar" WholeWords="true">
            <Open Keyword="{"/>
            <Close Keyword="}"/>
        </FoldRegion>
        <FoldRegion AddClose="true" NoSubFolds="true" Type="rtKeyword" WholeWords="true">
            <Open Keyword="/*"/>
            <Close Keyword="*/"/>
        </FoldRegion>
    </FoldRegions>

    <NativeDataTypes>
		<DataType kind="int">int</DataType>
		<DataType kind="int">char</DataType>
		<DataType kind="int">byte</DataType>
		<DataType kind="int">short</DataType>
		<DataType kind="int">long</DataType>
		<DataType kind="real">float</DataType>
		<DataType kind="real">double</DataType>
		<DataType kind="bool">boolean</DataType>
		<DataType kind="string">String</DataType>
		<DataType kind="other">StringBuilder</DataType>
		<DataType kind="other">Character</DataType>
		<DataType kind="other">Byte</DataType>
		<DataType kind="other">Short</DataType>
		<DataType kind="other">Integer</DataType>
		<DataType kind="other">Long</DataType>
		<DataType kind="other">Float</DataType>
		<DataType kind="other">Double</DataType>
		<DataType kind="other">Number</DataType>
		<DataType kind="other">Boolean</DataType>
		<DataType kind="other" generic="true" library="java.util">List</DataType>
		<DataType kind="other" generic="true" library="java.util">Map</DataType>
		<DataType kind="other" generic="true" library="java.util">Set</DataType>
		<DataType kind="other" generic="true" library="java.util">EnumSet</DataType>
		<DataType kind="other" generic="true" library="java.util">EnumMap</DataType>
		<DataType kind="other" generic="true" library="java.util">Queue</DataType>
		<DataType kind="other" generic="true" library="java.util">Deque</DataType>
		<DataType kind="other" library="java.math">BigDecimal</DataType>
		<DataType kind="other" library="java.math">BigInteger</DataType>
		<DataType kind="other" library="java.text">DateFormat</DataType>
		<DataType kind="other" library="java.time.format">DateTimeFormatter</DataType>
		<DataType kind="other" library="java.util">Date</DataType>
		<DataType kind="other" library="java.util">Calendar</DataType>
		<DataType kind="other" library="java.time">LocalDate</DataType>
		<DataType kind="other" library="java.time">LocalDateTime</DataType>
		<DataType kind="other" library="java.time">LocalTime</DataType>
		<DataType kind="other" library="java.time">Duration</DataType>
		<DataType kind="other" library="java.time">Period</DataType>
		<DataType kind="other" library="java.time">Instant</DataType>
		<DataType kind="other" library="java.time.temporal">Temporal</DataType>
		<DataType kind="other" library="java.util">Random</DataType>
		<DataType kind="other" library="java.util">Locale</DataType>
		<DataType kind="other" library="java.util.regex">Pattern</DataType>
		<DataType kind="other" library="java.io">File</DataType>
		<DataType kind="other" library="java.io">Writer</DataType>
		<DataType kind="other" library="java.io">Reader</DataType>
		<DataType kind="other" library="java.io">InputStream</DataType>
		<DataType kind="other" library="java.io">OutputStream</DataType>
    </NativeDataTypes>

    <KeyWords>
        <KeyWord>abstract</KeyWord>
        <KeyWord>assert</KeyWord>
        <KeyWord>boolean</KeyWord>
        <KeyWord>break</KeyWord>
        <KeyWord>byte</KeyWord>
        <KeyWord>case</KeyWord>
        <KeyWord>catch</KeyWord>
        <KeyWord>char</KeyWord>
        <KeyWord>class</KeyWord>
        <KeyWord>const</KeyWord>
        <KeyWord>continue</KeyWord>
        <KeyWord>default</KeyWord>
        <KeyWord>do</KeyWord>
        <KeyWord>double</KeyWord>
        <KeyWord>else</KeyWord>
        <KeyWord>enum</KeyWord>
        <KeyWord>extends</KeyWord>
        <KeyWord>final</KeyWord>
        <KeyWord>finally</KeyWord>
        <KeyWord>float</KeyWord>
        <KeyWord>for</KeyWord>
        <KeyWord>goto</KeyWord>
        <KeyWord>if</KeyWord>
        <KeyWord>implements</KeyWord>
        <KeyWord>import</KeyWord>
        <KeyWord>instanceof</KeyWord>
        <KeyWord>int</KeyWord>
        <KeyWord>interface</KeyWord>
        <KeyWord>long</KeyWord>
        <KeyWord>native</KeyWord>
        <KeyWord>new</KeyWord>
        <KeyWord>package</KeyWord>
        <KeyWord>private</KeyWord>
        <KeyWord>protected</KeyWord>
        <KeyWord>public</KeyWord>
        <KeyWord>return</KeyWord>
        <KeyWord>short</KeyWord>
        <KeyWord>static</KeyWord>
        <KeyWord>strictfp</KeyWord>
        <KeyWord>super</KeyWord>
        <KeyWord>switch</KeyWord>
        <KeyWord>synchronized</KeyWord>
        <KeyWord>this</KeyWord>
        <KeyWord>throw</KeyWord>
        <KeyWord>throws</KeyWord>
        <KeyWord>transient</KeyWord>
        <KeyWord>try</KeyWord>
        <KeyWord>void</KeyWord>
        <KeyWord>volatile</KeyWord>
        <KeyWord>while</KeyWord>
    </KeyWords>

<!--
Native function declarations will follow.
Attributes details:
- brackets: will be appended after function name
- bracketsCursorPos: cursor position that will be set inside brackets
- hint: will be displayed in status bar
- caption: if present, it will be displayed in menu instead of function name; useful for overloaded functions to describe possible parameters
- library: library containing function
-->	
    <NativeFunctions>
        <Function brackets="()" bracketsCursorPos="1" library="java.util.Arrays" hint="public static &lt;T&gt; List&lt;T&gt; asList(T... a) - return a fixed-size list backed by the specified array.">Arrays.asList</Function>
        <Function brackets="()" bracketsCursorPos="1" library="java.util.Collections" hint="public static void reverse(List&lt;?&gt; list) - reverse the order of the elements in the specified list.">Collections.reverse</Function>
    </NativeFunctions>

<!--
Element ProcedureLabelKey
Description: Key for label displayed close to flowchart for body of function that does not return specific data type.
It should contain name of key (free to be added) present in translation file (.lng) in Others section
-->
<ProcedureLabelKey>ProcedureLabelJava</ProcedureLabelKey>

<!--
Element FunctionLabelKey
Description: Key for label displayed close to flowchart for body of function that returns specific data type
-->
<FunctionLabelKey>FunctionLabelJava</FunctionLabelKey>

<!--
Element ConstructorLabelKey
Description: Key for label displayed for constructor flowchart
-->
<ConstructorLabelKey>ConstructorLabelJava</ConstructorLabelKey>

<!--
Element ProgramLabelKey
Description: Key for label displayed close to flowchart for body of project's main program
-->
<ProgramLabelKey>ProgramLabelJava</ProgramLabelKey>

<!--
Block label elements will follow.
Will be displayed in flowchart for given blocks.
-->
<LabelWhile>while</LabelWhile>
<LabelRepeat>do while</LabelRepeat>
<LabelFor>for</LabelFor>
<LabelCase>switch</LabelCase>
<LabelIf>if</LabelIf>
<LabelIfElse>if else</LabelIfElse>
<LabelFuncCall>method call</LabelFuncCall>
<LabelReturn>return</LabelReturn>
<LabelFolder>folder</LabelFolder>
<LabelText>text</LabelText>
<LabelIn>input</LabelIn>
<LabelOut>output</LabelOut>
<LabelInstr>instr</LabelInstr>
<LabelMultiInstr>instr</LabelMultiInstr>
<LabelFontName>Segoe Print</LabelFontName>
<LabelFontSize>10</LabelFontSize>

<ElseLabel>else</ElseLabel>

<!--
Element RepeatUntilDescTemplate
DescTemplate elements are used in Explorer window to display description of some troublesome blocks when it's impossible to extract proper description from block template.
Procedure for building description for flowchart elements in Explorer window is as follows:
	1. Use value proper DescTemplate element if it exists and is not empty, otherwise
	2. Use value from expression extracted from block template (e.g. from ForDoTemplate element); if such element does not exist or no expression placeholder (%s1) is found then
	3. Use value returned by hardcoded Delphi procedure 
Available placeholder:
   %s1 - condition expression 
-->
<RepeatUntilDescTemplate>do while %s1</RepeatUntilDescTemplate>

<HighLighterVarName>SynJavaSyn1</HighLighterVarName>

<!--
Elements used in code generation will follow.
The only valid character that is used to set indent level is tab. Whitespace chars will not work.
In lines containing branch indicators (e.g. %b1) all characters except for leading tabs are disregarded.
Template elements are intended to have many lines.
-->

<WhileTemplate>while (%s1) {
	%b1
}
</WhileTemplate>

<IfTemplate>if (%s1) { 
	%b1
}
</IfTemplate>

<IfElseTemplate>if (%s1) {
	%b1
} else {
	%b2
}
</IfElseTemplate>

<RepeatUntilTemplate>do {
	%b1
} while (%s1);
</RepeatUntilTemplate>

<!--
Element RepeatUntilAsDoWhile
False - break loop when condition is true (default, Pascal like)
True - continue loop when condition is true (C like)
Used to switch default repeat..until loop behaviour to work as do..while in C
-->
<RepeatUntilAsDoWhile>true</RepeatUntilAsDoWhile>

<!--
Element ForDoVarList
Determines whether control variable in ForDo block should be selected from dropdown list (true) 
or user is free to enter anything (false)
-->
<ForDoVarList>false</ForDoVarList>

<!--
Element ForDoVarString
String that will be displayed between control variable and initial value
-->
<ForDoVarString>=</ForDoVarString>

<!-- ForDoTemplate is not existing here since code generation of this block is hardcoded for Java -->

<!--
Element CaseOfValueTemplate
Available placeholders:
   %s1 - given value
   %b1 - body for given value section
Used in elements: CaseOfTemplate   
-->
<CaseOfValueTemplate>case %s1:
	%b1
	break;
</CaseOfValueTemplate>

<!--
Element CaseOfDefaultValueTemplate
Available placeholders:
   %b1 - body for case default section
Used in elements: CaseOfTemplate   
-->
<CaseOfDefaultValueTemplate>default:
	%b1
	break;
</CaseOfDefaultValueTemplate>

<!--
Element CaseOfTemplate
Available placeholders:
   %s1 - case of value
   %s2 - list of sections for specific values (list of CaseOfValueTemplate elements)
   %s3 - section for default value (CaseOfDefaultValueTemplate element)  
-->
<CaseOfTemplate>switch (%s1) {
	%s2
	%s3
}
</CaseOfTemplate>

<ReturnTemplate>return %s1;</ReturnTemplate>

<FunctionCallTemplate>%s1;</FunctionCallTemplate>

<InstrTemplate>%s1;</InstrTemplate>

<InputTemplate>%s1;</InputTemplate>

<OutputTemplate>%s1;</OutputTemplate>

<TextTemplate>/* %s1 */</TextTemplate>

<FolderTemplate>%b1</FolderTemplate>

<!--
Element FileContentsTemplate
Description: Template to define source file layout
Available placeholders:
   %s1 - project name
   %s2 - program header section (element ProgramHeaderTemplate)
   %s3 - libraries section (element LibTemplate)
   %s4 - global constants section (element ConstTemplate)
   %s5 - global variables section (element VarTemplate)
   %s6 - user datatypes section (element DataTypesTemplate)
   %s7 - user functions section (element FunctionsTemplate)
   %s8 - main function (element MainFunctionTemplate)
-->
<FileContentsTemplate>%s2

%s3

%s6

public class %s1 {

	%s4

	%s5

	%s7

	%s8
}
</FileContentsTemplate>

<!--
Element ProgramHeaderTemplate
Available placeholders:
   %s1 - project name
   %s2 - language name
   %s3 - text from comment marked as Program Header
   %s4 - code generation timestamp
   %s5 - language definition file used for code generation
-->
<ProgramHeaderTemplate>/*
	%s2 program generated by devFlowcharter
	for %s1 project	
	%s3
*/
</ProgramHeaderTemplate>

<!--
Element ExternalLabel
Used to change default label displayed for external variable/constant or function/datatype; it's non translated
-->
<ExternalLabel>public</ExternalLabel>

<!--
Element StaticLabel
Used to change default label displayed for static functions; it's not translated
-->
<StaticLabel>static</StaticLabel>

<!--
Element RecordLabel
Used to change default label displayed for record data type; it's not translated
-->
<RecordLabel>Bean</RecordLabel>

<!--
Element GlobalVarsLabelKey
Description: Label displayed for global variables.
It should contain name of key present in translation file (.lng) in Others section.
-->
<GlobalVarsLabelKey>InstanceVars</GlobalVarsLabelKey>

<!--
Element GlobalConstsLabelKey
Description: Label displayed for global constants.
It should contain name of key present in translation file (.lng) in Others section.
-->
<GlobalConstsLabelKey>InstanceConstants</GlobalConstsLabelKey>

<!--
Element FunctionHeaderArgsEntryMask
Available placeholders:
   %s1 - argument name
   %s2 - argument type
   %s3 - used if argument is passed by reference (element FunctionHeaderArgsEntryRef)
   %s4 - used if argument is an array (element FunctionHeaderArgsEntryArray)
   %s5 - used if argument is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if argument is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - expression for argument default value (element FunctionHeaderArgsEntryDefault)
-->
<FunctionHeaderArgsEntryMask>%s2%s4 %s1, </FunctionHeaderArgsEntryMask>
<FunctionHeaderArgsEntryArray>[]</FunctionHeaderArgsEntryArray>

<!--
Element FunctionHeaderArgsStripCount
Description: It contains number of chars to strip from end of argument list (element FunctionHeaderArgsEntryMask).
In given example ending to be stripped is ", " 
-->
<FunctionHeaderArgsStripCount>2</FunctionHeaderArgsStripCount>

<!--
Element FunctionHeaderTemplate
Description: Template for function header
Available placeholders:
   %s1 - name of the function
   %s2 - description/prefix of the function (element FunctionHeaderDescTemplate)
   %s3 - list of function parameters (list of FunctionHeaderArgsEntryMask elements)
   %s4 - return type
   %s5 - first string that depends if return type is none or specific (element FunctionHeaderTypeModifier1) 
   %s6 - second string that depends if return type is none or specific (element FunctionHeaderTypeModifier2)
   %s7 - string that depends if function is external or not (element FunctionHeaderExternalModifier); see also description for element ExternalLabel 
   %s8 - string that depends if function return type is array or not (element FunctionHeaderTypeArrayModifier)
   %s9 - string that depends if function is of static context (element FunctionHeaderStaticModifier); see also description for element StaticLabel    
-->
<FunctionHeaderTemplate>%s2
%s7%s9%s4%s5%s8 %s1(%s3) {
</FunctionHeaderTemplate>

<!--
Element ConstructorHeaderTemplate
Description: Template for constructor header; it is used when constructor checkbox is checked
Available placeholders are the same as for element FunctionHeaderTemplate.    
-->
<ConstructorHeaderTemplate>%s2
%s7%s1(%s3) {
</ConstructorHeaderTemplate>

<!--
Element FunctionHeaderTypeModifier1
Description: Returns value based on if function returns nothing|specific type
It returns value "void" if function type is none or an empty string otherwise
-->
<FunctionHeaderTypeModifier1>void|</FunctionHeaderTypeModifier1>

<!--
Element FunctionHeaderStaticModifier
Description: Returns value based on if function is static|not static
In given example, it returns value "static " if function is static or an empty string otherwise
-->
<FunctionHeaderStaticModifier>static |</FunctionHeaderStaticModifier>

<!--
Element FunctionHeaderExternalModifier
Description: Returns value based on if function is declared as public|private|protected
In given example, it returns value "public " if function is external, "private " if is not external or "protected " if is trans-external
Note that trans-external state is available only if AllowTransExternFunction is set to true
-->
<FunctionHeaderExternalModifier>public |private |protected </FunctionHeaderExternalModifier>

<!--
Element FunctionHeaderTypeArrayModifier
Description: Returns value based on if function return type array|not array
In given example, it returns value "[]" if function return type is array or an empty string otherwise
-->
<FunctionHeaderTypeArrayModifier>[]|</FunctionHeaderTypeArrayModifier>

<!--
Element FunctionHeaderDescTemplate
Description: Template for generated description/prefix of function header
Available placeholders:
   %s1 - name of the function
   %s2 - return type of the function
   %s3 - list of function parameters (list of FunctionHeaderDescParmMask elements); lines containing this placeholder will be deleted if there are no parameters
   %s4 - expression for return type of the function (element FunctionHeaderDescReturnMask); lines containing this placeholder will be deleted if function returns nothing or is constructor
-->
<FunctionHeaderDescTemplate>/**
 * 
 *
 * %s3
 * %s4
 */</FunctionHeaderDescTemplate>
 
<!--
Element FunctionHeaderDescParmMask
Description: Mask for function parameter (used in FunctionHeaderDescTemplate element)  
Available placeholders:
   %s1 - name of the parameter
   %s2 - type of the parameter
   %s3 - default value of the parameter
   %s4 - index of the parameter (1-based)
-->
<FunctionHeaderDescParmMask>@param  %s1 </FunctionHeaderDescParmMask>

<!--
Element FunctionHeaderDescReturnMask
Description: Mask for function return type (used in FunctionHeaderDescTemplate element)  
Available placeholders:
   %s1 - return type of the function
-->
<FunctionHeaderDescReturnMask>@return </FunctionHeaderDescReturnMask>

<!--
Element FunctionBodyTemplate
Description: Template for function body
Available placeholders:
   %s1 - function name
   %s2 - function local variables (element VarTemplate)
   %b1 - body of function  
-->
<FunctionBodyTemplate>%b1</FunctionBodyTemplate>

<!--
Element FunctionTemplate
Description: Template for function (header + body)
Available placeholders:
   %s1 - function's header line (element FunctionHeaderTemplate or ConstructorHeaderTemplate)
   %s2 - function's local variables (element VarTemplate)
   %s3 - function's body (element FunctionBodyTemplate)  
-->
<FunctionTemplate>%s1

	%s2
	%s3
}
</FunctionTemplate>

<!--
Element FunctionsTemplate
Description: Template for user functions section
Available placeholders:
   %s1 - list of function declarations (list of FunctionTemplate elements)  
-->
<FunctionsTemplate>%s1</FunctionsTemplate>

<!--
Element MainFunctionTemplate
Description: Template for main program body
Available placeholders:
   %s1 - project name
   %s2 - global variables (element VarTemplate)
   %s3 - return statement which is generated if last statement of program isn't return block (element ProgramReturnTemplate)
   %b1 - main function body  
-->
<MainFunctionTemplate>public static void main(String[] args) {

	%b1
}
</MainFunctionTemplate>

<ProgramReturnTemplate>/* Program ends with no value returned. */</ProgramReturnTemplate>

<!--
Element VarEntry
Description: Entry for single variable (non-array) declaration
Available placeholders:
   %s1 - variable name
   %s2 - variable type
   %s4 - variable initial value (element VarEntryInit or VarEntryInitExtern) 
   %s5 - used if variable is a record (element FunctionHeaderArgsEntryRecord)
   %s6 - used if variable is an enumeration (element FunctionHeaderArgsEntryEnum)
   %s7 - used if variable is marked as external and GenExternVarConst element is true (element ExternEntry)
-->
<VarEntry>%s7%s5%s6%s2 %s1%s4;</VarEntry>

<!--
Element VarEntryArray
Description: Entry for single array variable declaration
Available placeholders are the same as for VarEntry element and:
   %s3 - list of array sizes (VarEntryArraySize element)
-->
<VarEntryArray>%s7%s5%s6%s2 %s1%s3%s4;</VarEntryArray>

<!--
Element VarEntryArraySize
Description: Entry for array's single dimension
   %s - size of array dimension
-->
<VarEntryArraySize>[]</VarEntryArraySize>

<!--
Element VarEntryArraySizeStripCount
Description: Number of chars to strip from end of array size declaration (VarEntryArraySize) 
-->
<VarEntryArraySizeStripCount>0</VarEntryArraySizeStripCount>

<!--
Element VarEntryInit
Description: Mask for not external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInit> = %s1</VarEntryInit>

<!--
Element VarEntryInitExtern
Description: Mask for external variable initial value
Available placeholders:
   %s1 - variable initial value
-->
<VarEntryInitExtern> = %s1</VarEntryInitExtern>

<!--
Element ConstTemplate
Description: Template for section to declare constants
Available placeholders:
   %s1 - list of constants (list of ConstEntry elements) 
-->
<ConstTemplate>%s1</ConstTemplate>

<!--
Element VarExternModifier
Description: Variable declaration modifier depending if variable is public|private|protected
Trans-external state is enabled only if AllowTransExternVarConst is set to true.
In given example, it returns "public " if variable is external, "private " if not external and "protected " if trans-external
-->
<VarExternModifier>public |private |protected </VarExternModifier>

<!--
Element ConstExternModifier
Description: Constant declaration modifier depending if constant is public|private|protected
Trans-external state is enabled only if AllowTransExternVarConst is set to true.
In given example, it returns "public " if constant is external, "private " if not external and "protected " if trans-external
-->
<ConstExternModifier>public |private |protected </ConstExternModifier>

<!--
Element ConstEntry
Description: Entry for single declaration of constant
Available placeholders:
   %s1 - constant name
   %s2 - constant value
   %s3 - string depending if constant is external (element ConstExternModifier)
   %s4 - constant type expression (element ConstTypeModifier)
-->
<ConstEntry>%s3static final %s4 %s1 = %s2;</ConstEntry>

<!--
Element ConstEntryArray
Description: Entry for single constant array declaration
Available placeholders are the same as for ConstEntry element and:
   %s5 - list of array sizes (VarEntryArraySize element)
-->
<ConstEntryArray>%s3static final %s4%s5 %s1 = %s2;</ConstEntryArray>

<!--
Element ConstTypeModifier
Description:
Constant type expression depending if evaluated contstant type is not generic|generic
Available placeholders:
   %s1 - main type
   %s2 - generic types string (used when main type is a generic type)  
-->
<ConstTypeModifier>%s1|%s1&lt;%s2&gt;</ConstTypeModifier>

<LibEntry>import %s;</LibEntry>

<!--
Element DataTypeExternalModifier
Description: It returns value based on whether datatype is declared as external, not external or trans-external
Trans-external state is enabled only if AllowTransExternDataType is set to true.
In given example, it returns value "public " if datatype is external or empty string otherwise
-->
<DataTypeExternalModifier>public </DataTypeExternalModifier>

<!--
Element UserTypeDesc
Description: Mask for user datatype description
Available placeholders:
   %s1 - type name
   %s2 - type kind
-->
<UserTypeDesc>%s2 %s1</UserTypeDesc>

</Language>