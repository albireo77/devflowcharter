{ lexical analyzer template (TP Lex V3.0), V1.0 3-2-91 AG		}
{ 24.3.98: repacked into an class to make code thread-safe.		}
{ Modified September 2000 by C.P.Osborne for Delphi 4/5			}
{	11/09/2000	CPO	Mods started.				}
{				Converted for new LexLib, YaccLib.	}
{ global definitions: 							}
%%
function TLex.yylex(var yylval: YYSType): Integer;
procedure yyaction(yyruleno: Integer);
{ local definitions:							}
%%
begin
  { actions: 								}
  case yyruleno of
%%
  end;
end;	{ yyaction	}
{ DFA table: 								}
%%
var yyn: Integer;
label start, scan, action;
begin
start:
  { initialize:								}
  yynew;
scan:
  { Mark positions and matches: 					}
  for yyn := yykl[yystate] to yykh[yystate] do yymark(yyk[yyn]);
  for yyn := yymh[yystate] downto yyml[yystate] do yymatch(yym[yyn]);
  if yytl[yystate]>yyth[yystate] then goto action;	{ dead state	}
  { Get next character:							}
  yyscan;
  { Determine action:							}
  yyn := yytl[yystate];
  while (yyn<=yyth[yystate]) and not (yyactchar in yyt[yyn].cc) do inc(yyn);
  if yyn>yyth[yystate] then goto action;
	{ No transition on yyactchar in this state.			}
  { Switch to new state:						}
  yystate := yyt[yyn].s;
  goto scan;
action:
  { Execute action: 							}
  if yyfind(yyrule) then
  begin
    yyaction(yyrule);
    if yyreject then goto action;
  end
  else if not yydefault and yywrap then
  begin
    yyclear;
    return(0);
  end;
  if not yydone then goto start;
  yylex := yyretval;
end;